{"version":3,"file":"/packages/oauth.js","sources":["oauth/oauth_server.js","oauth/pending_credentials.js","oauth/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,kC;AACA,6B;;AAEA,W;AACA,e;;AAEA,2C;;AAEA,4B;;AAEA,+D;AACA,sE;AACA,iB;AACA,E;AACA,4B;;;AAGA,sE;AACA,sE;AACA,mE;AACA,c;AACA,E;AACA,iD;AACA,iD;AACA,4D;AACA,2D;AACA,uF;AACA,yE;AACA,uB;AACA,yE;AACA,8C;AACA,wD;AACA,E;AACA,4E;AACA,+B;AACA,yE;;AAEA,8B;AACA,sB;AACA,qB;AACA,e;AACA,0C;AACA,I;AACA,E;;AAEA,oB;AACA,+C;AACA,kC;AACA,E;;;AAGA,wE;AACA,6E;AACA,E;;;AAGA,yC;AACA,qD;AACA,gF;AACA,mD;AACA,qB;AACA,+B;AACA,W;AACA,G;;AAEA,wC;AACA,mE;AACA,e;AACA,O;AACA,4C;AACA,uB;AACA,uD;AACA,a;AACA,a;AACA,K;;AAEA,kD;;AAEA,wE;AACA,iB;AACA,iE;;AAEA,iC;AACA,kC;;AAEA,0D;AACA,iB;AACA,qE;AACA,qC;AACA,iB;AACA,oE;AACA,8D;AACA,M;AACA,oE;AACA,sE;AACA,iE;AACA,iD;AACA,kD;AACA,4D;AACA,4D;AACA,qB;AACA,uE;AACA,qE;AACA,gF;AACA,2C;AACA,O;AACA,K;;AAEA,+D;AACA,iE;AACA,4B;AACA,gD;AACA,kE;AACA,iD;AACA,oE;AACA,M;AACA,8D;AACA,+D;AACA,4C;AACA,oB;AACA,G;AACA,E;;AAEA,kC;;AAEA,uD;AACA,E;AACA,mE;AACA,gB;AACA,uC;AACA,sD;AACA,4D;AACA,sC;;AAEA,yD;AACA,iB;AACA,gC;AACA,gB;;AAEA,8B;AACA,iC;AACA,qB;AACA,E;;AAEA,6B;AACA,8C;AACA,6E;AACA,iD;AACA,G;AACA,E;;AAEA,mD;AACA,oE;AACA,qE;AACA,kD;AACA,wE;AACA,uE;AACA,6D;AACA,8C;AACA,sD;AACA,uC;AACA,2B;AACA,sD;AACA,oB;AACA,gF;AACA,mD;AACA,8B;AACA,4D;AACA,yD;AACA,qE;AACA,wE;AACA,8D;AACA,+D;AACA,2C;AACA,+E;AACA,0E;AACA,uD;AACA,Y;AACA,yB;AACA,K;AACA,c;AACA,U;AACA,sD;AACA,yB;AACA,G;AACA,E;;AAEA,yD;;AAEA,iC;AACA,4D;AACA,mB;AACA,uC;AACA,sC;AACA,I;;AAEA,oD;AACA,6E;AACA,sE;AACA,6E;AACA,wB;AACA,+B;AACA,+E;AACA,+C;AACA,oE;AACA,6E;AACA,G;AACA,e;AACA,gC;AACA,6B;AACA,gD;AACA,4B;AACA,E;;;AAGA,iG;;AAEA,wC;AACA,0D;AACA,E;;AAEA,8D;AACA,oE;AACA,gE;AACA,E;AACA,mE;AACA,mE;AACA,qE;AACA,sE;AACA,uC;AACA,E;AACA,yC;AACA,6B;AACA,2C;AACA,M;AACA,qB;AACA,C;;AAEA,4D;AACA,gD;AACA,E;AACA,sE;AACA,sE;AACA,E;AACA,mD;AACA,6E;AACA,uB;;AAEA,mD;AACA,E;;AAEA,+C;AACA,E;AACA,oD;AACA,kB;AACA,8C;AACA,6D;AACA,K;AACA,gB;AACA,E;;;;;;;;;;;;;;;;;;;ACnQA,E;AACA,mE;AACA,+D;AACA,6D;AACA,oC;AACA,E;AACA,iE;AACA,gC;AACA,E;;;AAGA,yE;AACA,6C;AACA,kD;AACA,sC;AACA,6B;AACA,K;;AAEA,2D;AACA,2D;AACA,oD;;;;AAIA,2D;AACA,qC;AACA,2C;AACA,8B;AACA,qD;AACA,uE;AACA,E;AACA,uE;;;AAGA,uE;AACA,oD;AACA,E;AACA,sB;AACA,uD;AACA,sE;AACA,qD;AACA,E;AACA,8E;AACA,qB;AACA,kD;;AAEA,oC;AACA,2C;AACA,U;AACA,8C;AACA,G;;AAEA,uE;AACA,qE;AACA,gD;AACA,oC;AACA,Y;AACA,M;AACA,a;AACA,2B;AACA,+C;AACA,yB;AACA,K;AACA,E;;;AAGA,6E;AACA,E;AACA,sB;AACA,mC;AACA,E;AACA,qE;AACA,qB;;AAEA,6D;AACA,a;AACA,8C;AACA,K;AACA,0B;AACA,qE;AACA,2C;AACA,+D;AACA,Q;AACA,4D;AACA,U;AACA,qB;AACA,G;AACA,E;;;AAGA,8D;AACA,0D;AACA,8D;AACA,qC;AACA,uB;AACA,2D;AACA,kC;AACA,K;;AAEA,8C;AACA,qC;AACA,sC;AACA,G;;AAEA,gC;AACA,E;;AAEA,wD;AACA,wC;AACA,Y;;AAEA,6B;AACA,+B;AACA,gC;AACA,U;AACA,wB;AACA,G;;AAEA,8D;AACA,+B;AACA,K;;AAEA,e;AACA,E;;;;;;;;;;;;;;;;;;;AC3HA,wB;;AAEA,c","sourcesContent":["var Fiber = Npm.require('fibers');\nvar url = Npm.require('url');\n\nOAuth = {};\nOAuthTest = {};\n\nRoutePolicy.declare('/_oauth/', 'network');\n\nvar registeredServices = {};\n\n// Internal: Maps from service version to handler function. The\n// 'oauth1' and 'oauth2' packages manipulate this directly to register\n// for callbacks.\n//\nOAuth._requestHandlers = {};\n\n\n// Register a handler for an OAuth service. The handler will be called\n// when we get an incoming http request on /_oauth/{serviceName}. This\n// handler should use that information to fetch data about the user\n// logging in.\n//\n// @param name {String} e.g. \"google\", \"facebook\"\n// @param version {Number} OAuth version (1 or 2)\n// @param urls   For OAuth1 only, specify the service's urls\n// @param handleOauthRequest {Function(oauthBinding|query)}\n//   - (For OAuth1 only) oauthBinding {OAuth1Binding} bound to the appropriate provider\n//   - (For OAuth2 only) query {Object} parameters passed in query string\n//   - return value is:\n//     - {serviceData:, (optional options:)} where serviceData should end\n//       up in the user's services[name] field\n//     - `null` if the user declined to give permissions\n//\nOAuth.registerService = function (name, version, urls, handleOauthRequest) {\n  if (registeredServices[name])\n    throw new Error(\"Already registered the \" + name + \" OAuth service\");\n\n  registeredServices[name] = {\n    serviceName: name,\n    version: version,\n    urls: urls,\n    handleOauthRequest: handleOauthRequest\n  };\n};\n\n// For test cleanup.\nOAuthTest.unregisterService = function (name) {\n  delete registeredServices[name];\n};\n\n\nOAuth.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth._retrievePendingCredential(credentialToken, credentialSecret);\n};\n\n\n// Listen to incoming OAuth http requests\nWebApp.connectHandlers.use(function(req, res, next) {\n  // Need to create a Fiber since we're using synchronous http calls and nothing\n  // else is wrapping this in a fiber automatically\n  Fiber(function () {\n    middleware(req, res, next);\n  }).run();\n});\n\nmiddleware = function (req, res, next) {\n  // Make sure to catch any exceptions because otherwise we'd crash\n  // the runner\n  try {\n    var serviceName = oauthServiceName(req);\n    if (!serviceName) {\n      // not an oauth request. pass to next middleware.\n      next();\n      return;\n    }\n\n    var service = registeredServices[serviceName];\n\n    // Skip everything if there's no service set by the oauth middleware\n    if (!service)\n      throw new Error(\"Unexpected OAuth service \" + serviceName);\n\n    // Make sure we're configured\n    ensureConfigured(serviceName);\n\n    var handler = OAuth._requestHandlers[service.version];\n    if (!handler)\n      throw new Error(\"Unexpected OAuth version \" + service.version);\n    handler(service, req.query, res);\n  } catch (err) {\n    // if we got thrown an error, save it off, it will get passed to\n    // the appropriate login call (if any) and reported there.\n    //\n    // The other option would be to display it in the popup tab that\n    // is still open at this point, ignoring the 'close' or 'redirect'\n    // we were passed. But then the developer wouldn't be able to\n    // style the error or react to it in any way.\n    if (req.query.state && err instanceof Error) {\n      try { // catch any exceptions to avoid crashing runner\n        OAuth._storePendingCredential(req.query.state, err);\n      } catch (err) {\n        // Ignore the error and just give up. If we failed to store the\n        // error, then the login will just fail with a generic error.\n        Log.warn(\"Error in OAuth Server while storing pending login result.\\n\" +\n                 err.stack || err.message);\n      }\n    }\n\n    // XXX the following is actually wrong. if someone wants to\n    // redirect rather than close once we are done with the OAuth\n    // flow, as supported by\n    // Oauth_renderOauthResults, this will still\n    // close the popup instead. Once we fully support the redirect\n    // flow (by supporting that in places such as\n    // packages/facebook/facebook_client.js) we should revisit this.\n    //\n    // close the popup. because nobody likes them just hanging\n    // there.  when someone sees this multiple times they might\n    // think to check server logs (we hope?)\n    closePopup(res);\n  }\n};\n\nOAuthTest.middleware = middleware;\n\n// Handle /_oauth/* paths and extract the service name.\n//\n// @returns {String|null} e.g. \"facebook\", or null if this isn't an\n// oauth request\nvar oauthServiceName = function (req) {\n  // req.url will be \"/_oauth/<service name>?<action>\"\n  var barePath = req.url.substring(0, req.url.indexOf('?'));\n  var splitPath = barePath.split('/');\n\n  // Any non-oauth request will continue down the default\n  // middlewares.\n  if (splitPath[1] !== '_oauth')\n    return null;\n\n  // Find service based on url\n  var serviceName = splitPath[2];\n  return serviceName;\n};\n\n// Make sure we're configured\nvar ensureConfigured = function(serviceName) {\n  if (!ServiceConfiguration.configurations.findOne({service: serviceName})) {\n    throw new ServiceConfiguration.ConfigError();\n  }\n};\n\n// Internal: used by the oauth1 and oauth2 packages\nOAuth._renderOauthResults = function(res, query, credentialSecret) {\n  // We support ?close and ?redirect=URL. Any other query should just\n  // serve a blank page. For tests, we support the\n  // `only_credential_secret_for_test` parameter, which just returns the\n  // credential secret without any surrounding HTML. (The test needs to\n  // be able to easily grab the secret and use it to log in.)\n  if (query.only_credential_secret_for_test) {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    res.end(credentialSecret, 'utf-8');\n  } else if (query.error) {\n    Log.warn(\"Error in OAuth Server: \" + query.error);\n    closePopup(res);\n  } else if ('close' in query) { // check with 'in' because we don't set a value\n    closePopup(res, query.state, credentialSecret);\n  } else if (query.redirect) {\n    // Only redirect to URLs on the same domain as this app.\n    // XXX No code in core uses this code path right now.\n    // XXX In order for the redirect flow to be fully supported, we'd\n    // have to communicate the credentialSecret back to the app somehow.\n    var redirectHostname = url.parse(query.redirect).hostname;\n    var appHostname = url.parse(Meteor.absoluteUrl()).hostname;\n    if (appHostname === redirectHostname) {\n      // We rely on node to make sure the header is really only a single header\n      // (not, for example, a url with a newline and then another header).\n      res.writeHead(302, {'Location': query.redirect});\n    } else {\n      res.writeHead(400);\n    }\n    res.end();\n  } else {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    res.end('', 'utf-8');\n  }\n};\n\nvar closePopup = function(res, state, credentialSecret) {\n\n  var isSafe = function (value) {\n    // This matches strings generated by `Random.secret` and\n    // `Random.id`.\n    return typeof value === \"string\" &&\n      /^[a-zA-Z0-9\\-_]+$/.test(value);\n  };\n\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  // If we have a credentialSecret, report it back to the parent window, with\n  // the corresponding state (which we sanitize because it came from a\n  // query parameter). The parent window uses the state and credential secret\n  // to log in over DDP.\n  var setCredentialSecret = '';\n  if (state && credentialSecret && isSafe(state) && isSafe(credentialSecret)) {\n    setCredentialSecret = 'window.opener && ' +\n      'window.opener.Package.oauth.OAuth._handleCredentialSecret(' +\n      JSON.stringify(state) + ', ' + JSON.stringify(credentialSecret) + ');';\n  }\n  var content =\n        '<html><head><script>' +\n        setCredentialSecret +\n        'window.close()</script></head></html>';\n  res.end(content, 'utf-8');\n};\n\n\nvar OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nvar usingOAuthEncryption = function () {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n};\n\n// Encrypt sensitive service data such as access tokens if the\n// \"oauth-encryption\" package is loaded and the oauth secret key has\n// been specified.  Returns the unencrypted plaintext otherwise.\n//\n// The user id is not specified because the user isn't known yet at\n// this point in the oauth authentication process.  After the oauth\n// authentication process completes the encrypted service data fields\n// will be re-encrypted with the user id included before inserting the\n// service data into the user document.\n//\nOAuth.sealSecret = function (plaintext) {\n  if (usingOAuthEncryption())\n    return OAuthEncryption.seal(plaintext);\n  else\n    return plaintext;\n}\n\n// Unencrypt a service data field, if the \"oauth-encryption\"\n// package is loaded and the field is encrypted.\n//\n// Throws an error if the \"oauth-encryption\" package is loaded and the\n// field is encrypted, but the oauth secret key hasn't been specified.\n//\nOAuth.openSecret = function (maybeSecret, userId) {\n  if (!Package[\"oauth-encryption\"] || !OAuthEncryption.isSealed(maybeSecret))\n    return maybeSecret;\n\n  return OAuthEncryption.open(maybeSecret, userId);\n};\n\n// Unencrypt fields in the service data object.\n//\nOAuth.openSecrets = function (serviceData, userId) {\n  var result = {};\n  _.each(_.keys(serviceData), function (key) {\n    result[key] = OAuth.openSecret(serviceData[key], userId);\n  });\n  return result;\n};\n","//\n// When an oauth request is made, Meteor receives oauth credentials\n// in one browser tab, and temporarily persists them while that\n// tab is closed, then retrieves them in the browser tab that\n// initiated the credential request.\n//\n// _pendingCredentials is the storage mechanism used to share the\n// credential between the 2 tabs\n//\n\n\n// Collection containing pending credentials of oauth credential requests\n// Has key, credential, and createdAt fields.\nOAuth._pendingCredentials = new Meteor.Collection(\n  \"meteor_oauth_pendingCredentials\", {\n    _preventAutopublish: true\n  });\n\nOAuth._pendingCredentials._ensureIndex('key', {unique: 1});\nOAuth._pendingCredentials._ensureIndex('credentialSecret');\nOAuth._pendingCredentials._ensureIndex('createdAt');\n\n\n\n// Periodically clear old entries that were never retrieved\nvar _cleanStaleResults = function() {\n  // Remove credentials older than 1 minute\n  var timeCutoff = new Date();\n  timeCutoff.setMinutes(timeCutoff.getMinutes() - 1);\n  OAuth._pendingCredentials.remove({ createdAt: { $lt: timeCutoff } });\n};\nvar _cleanupHandle = Meteor.setInterval(_cleanStaleResults, 60 * 1000);\n\n\n// Stores the key and credential in the _pendingCredentials collection.\n// Will throw an exception if `key` is not a string.\n//\n// @param key {string}\n// @param credential {Object}   The credential to store\n// @param credentialSecret {string} A secret that must be presented in\n//   addition to the `key` to retrieve the credential\n//\nOAuth._storePendingCredential = function (key, credential, credentialSecret) {\n  check(key, String);\n  check(credentialSecret, Match.Optional(String));\n\n  if (credential instanceof Error) {\n    credential = storableError(credential);\n  } else {\n    credential = OAuth.sealSecret(credential);\n  }\n\n  // We do an upsert here instead of an insert in case the user happens\n  // to somehow send the same `state` parameter twice during an OAuth\n  // login; we don't want a duplicate key error.\n  OAuth._pendingCredentials.upsert({\n    key: key\n  }, {\n    key: key,\n    credential: credential,\n    credentialSecret: credentialSecret || null,\n    createdAt: new Date()\n  });\n};\n\n\n// Retrieves and removes a credential from the _pendingCredentials collection\n//\n// @param key {string}\n// @param credentialSecret {string}\n//\nOAuth._retrievePendingCredential = function (key, credentialSecret) {\n  check(key, String);\n\n  var pendingCredential = OAuth._pendingCredentials.findOne({\n    key: key,\n    credentialSecret: credentialSecret || null\n  });\n  if (pendingCredential) {\n    OAuth._pendingCredentials.remove({ _id: pendingCredential._id });\n    if (pendingCredential.credential.error)\n      return recreateError(pendingCredential.credential.error);\n    else\n      return OAuth.openSecret(pendingCredential.credential);\n  } else {\n    return undefined;\n  }\n};\n\n\n// Convert an Error into an object that can be stored in mongo\n// Note: A Meteor.Error is reconstructed as a Meteor.Error\n// All other error classes are reconstructed as a plain Error.\nvar storableError = function(error) {\n  var plainObject = {};\n  Object.getOwnPropertyNames(error).forEach(function(key) {\n    plainObject[key] = error[key];\n  });\n\n  // Keep track of whether it's a Meteor.Error\n  if(error instanceof Meteor.Error) {\n    plainObject['meteorError'] = true;\n  }\n\n  return { error: plainObject };\n};\n\n// Create an error from the error format stored in mongo\nvar recreateError = function(errorDoc) {\n  var error;\n\n  if (errorDoc.meteorError) {\n    error = new Meteor.Error();\n    delete errorDoc.meteorError;\n  } else {\n    error = new Error();\n  }\n\n  Object.getOwnPropertyNames(errorDoc).forEach(function(key) {\n    error[key] = errorDoc[key];\n  });\n\n  return error;\n};\n","// XXX COMPAT WITH 0.8.0\n\nOauth = OAuth;\n"]}