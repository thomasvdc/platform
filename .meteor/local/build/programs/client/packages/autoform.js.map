)]}'
{"version":3,"file":"/packages/autoform.js","sources":["autoform/autoform-common.js","autoform/templates/bootstrap3/bootstrap3.html","autoform/templates/bootstrap3/bootstrap3.js","autoform/templates/bootstrap3-span/bootstrap3-span.html","autoform/templates/bootstrap3-span/bootstrap3-span.js","autoform/templates/bootstrap3-horizontal/bootstrap3-horizontal.html","autoform/templates/bootstrap3-horizontal/bootstrap3-horizontal.js","autoform/templates/plain/plain.html","autoform/templates/plain/plain.js","autoform/templates/plain-fieldset/plain-fieldset.html","autoform/templates/plain-fieldset/plain-fieldset.js","autoform/templates/plain-span/plain-span.html","autoform/templates/plain-span/plain-span.js","autoform/autoform.html","autoform/utility.js","autoform/form-preserve.js","autoform/autoform-hooks.js","autoform/autoform-inputs.js","autoform/autoform-formdata.js","autoform/autoform-arrays.js","autoform/autoform.js","autoform/autoform-helpers.js","autoform/autoform-events.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oD;AACA,4B;AACA,kC;AACA,G;;;;;;;;;;;;;;;;;;;ACFA,yD;AACA,kB;AACA,sB;AACA,4C;AACA,gF;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,6C;AACA,iF;AACA,qE;AACA,4E;AACA,Y;AACA,8B;AACA,wB;AACA,gE;AACA,kB;AACA,mD;AACA,4C;AACA,wF;AACA,+F;AACA,Y;AACA,gC;AACA,0B;AACA,wE;AACA,wB;AACA,uC;AACA,4D;AACA,8B;AACA,wB;AACA,6D;AACA,kC;AACA,2E;AACA,a;AACA,kD;AACA,2F;AACA,gC;AACA,0B;AACA,2C;AACA,wD;AACA,0B;AACA,iC;AACA,0B;AACA,0C;AACA,gD;AACA,oB;AACA,Q;AACA,M;AACA,I;;AAEA,4D;AACA,kB;AACA,sB;AACA,qB;AACA,4B;AACA,yD;AACA,O;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,K;AACA,I;;AAEA,0D;AACA,kB;AACA,sB;AACA,mB;AACA,uB;AACA,kD;AACA,qB;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,yD;AACA,O;AACA,8B;AACA,6E;AACA,mD;AACA,Q;AACA,wB;AACA,I;;AAEA,+D;AACA,kB;AACA,sB;AACA,6B;AACA,oE;AACA,0B;AACA,oB;AACA,iC;AACA,yB;AACA,wD;AACA,uB;AACA,yB;AACA,4E;AACA,Q;AACA,8B;AACA,2D;AACA,S;AACA,kC;AACA,0E;AACA,wC;AACA,M;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,mB;AACA,oB;AACA,kD;AACA,kB;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,yD;AACA,O;AACA,8B;AACA,6E;AACA,mD;AACA,Q;AACA,wB;AACA,I;;AAEA,4D;AACA,kB;AACA,sB;AACA,6B;AACA,oE;AACA,0B;AACA,oB;AACA,iC;AACA,sB;AACA,wD;AACA,oB;AACA,yB;AACA,4E;AACA,Q;AACA,8B;AACA,2D;AACA,S;AACA,kC;AACA,0E;AACA,wC;AACA,M;AACA,I;;AAEA,iE;AACA,kB;AACA,sB;AACA,2E;AACA,I;;AAEA,6D;AACA,kB;AACA,sB;AACA,sB;AACA,4B;AACA,yD;AACA,O;AACA,6C;AACA,2D;AACA,c;AACA,I;;AAEA,wD;AACA,kB;AACA,sB;AACA,sB;AACA,4B;AACA,yD;AACA,O;AACA,mC;AACA,oE;AACA,0B;AACA,oB;AACA,sC;AACA,8B;AACA,iE;AACA,S;AACA,mB;AACA,0E;AACA,mB;AACA,e;AACA,I;;AAEA,0D;AACA,kB;AACA,sB;AACA,wB;AACA,4B;AACA,yD;AACA,O;AACA,iB;AACA,wE;AACA,K;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,qB;AACA,sB;AACA,yE;AACA,M;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,yD;AACA,O;AACA,K;AACA,I;;AAEA,8D;AACA,kB;AACA,sB;AACA,4C;AACA,Y;AACA,gF;AACA,qC;AACA,kE;AACA,+D;AACA,M;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,oC;AACA,uB;AACA,gC;AACA,6D;AACA,W;AACA,2B;AACA,gF;AACA,8B;AACA,wB;AACA,6C;AACA,kE;AACA,W;AACA,+B;AACA,wB;AACA,wB;AACA,qB;AACA,Q;AACA,M;AACA,I;;AAEA,4D;AACA,kB;AACA,sB;AACA,mB;AACA,gD;AACA,mF;AACA,8D;AACA,qE;AACA,U;AACA,4B;AACA,sB;AACA,yB;AACA,S;AACA,qC;AACA,wE;AACA,0B;AACA,oB;AACA,0D;AACA,iF;AACA,4B;AACA,sB;AACA,oE;AACA,oB;AACA,oD;AACA,+E;AACA,0B;AACA,oB;AACA,kE;AACA,4B;AACA,yB;AACA,iB;AACA,6F;AACA,4D;AACA,mE;AACA,S;AACA,c;AACA,I;;AAEA,6D;AACA,kB;AACA,sB;AACA,mB;AACA,kC;AACA,yB;AACA,4B;AACA,0B;AACA,0B;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,qC;AACA,yB;AACA,mC;AACA,iF;AACA,4D;AACA,2D;AACA,Q;AACA,0B;AACA,oB;AACA,oC;AACA,2B;AACA,mB;AACA,+F;AACA,8D;AACA,6D;AACA,W;AACA,qB;AACA,uC;AACA,6E;AACA,4D;AACA,gE;AACA,uE;AACA,Q;AACA,0B;AACA,oB;AACA,8D;AACA,c;AACA,+C;AACA,wC;AACA,mF;AACA,0F;AACA,Q;AACA,4B;AACA,sB;AACA,oE;AACA,sB;AACA,0B;AACA,I;;AAEA,4D;AACA,kB;AACA,sB;AACA,mB;AACA,kC;AACA,yB;AACA,4B;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,kC;AACA,iF;AACA,4D;AACA,2D;AACA,Q;AACA,0B;AACA,oB;AACA,iC;AACA,qC;AACA,8B;AACA,2B;AACA,mB;AACA,+F;AACA,8D;AACA,6D;AACA,W;AACA,8B;AACA,0B;AACA,yB;AACA,oD;AACA,Y;AACA,4E;AACA,oF;AACA,mF;AACA,M;AACA,0B;AACA,oB;AACA,0F;AACA,sB;AACA,oC;AACA,sD;AACA,iC;AACA,wB;AACA,2C;AACA,mG;AACA,iE;AACA,iE;AACA,yE;AACA,wE;AACA,Y;AACA,8B;AACA,wB;AACA,8C;AACA,mE;AACA,sB;AACA,8C;AACA,8B;AACA,qC;AACA,6B;AACA,8D;AACA,gB;AACA,wE;AACA,uC;AACA,0C;AACA,qF;AACA,4F;AACA,U;AACA,8B;AACA,wB;AACA,sE;AACA,qE;AACA,Q;AACA,qC;AACA,+F;AACA,4D;AACA,4D;AACA,oE;AACA,mE;AACA,Q;AACA,0B;AACA,oB;AACA,kC;AACA,gC;AACA,kC;AACA,mD;AACA,yC;AACA,mF;AACA,Q;AACA,4C;AACA,uF;AACA,Q;AACA,4C;AACA,uF;AACA,O;AACA,kB;AACA,yC;AACA,mC;AACA,0B;AACA,I;;;;;;;;;;;;;;;;;;;AC1bA,E;AACA,6C;AACA,G;;AAEA,wE;AACA,+B;AACA,+D;AACA,qC;AACA,+C;AACA,mG;AACA,U;AACA,yC;AACA,G;AACA,mC;AACA,sD;AACA,mB;AACA,E;;AAEA,4E;AACA,wB;AACA,0F;AACA,qC;AACA,gD;AACA,qG;AACA,U;AACA,2C;AACA,G;AACA,oB;AACA,E;;AAEA,4F;AACA,yB;AACA,8B;AACA,oC;AACA,iD;AACA,gD;AACA,G;AACA,c;AACA,E;;AAEA,oF;AACA,uC;AACA,kE;AACA,E;;AAEA,+B;AACA,gC;AACA,0C;AACA,qC;AACA,U;AACA,mC;AACA,G;AACA,c;AACA,C;;AAEA,+D;AACA,0D;AACA,4D;AACA,yD;;AAEA,yC;AACA,qC;AACA,8C;AACA,wD;AACA,gC;AACA,sB;AACA,sB;AACA,G;AACA,c;AACA,E;;AAEA,0D;AACA,iB;AACA,c;AACA,qB;AACA,I;AACA,sB;AACA,uB;AACA,G;AACA,c;AACA,E;;;;;;;;;;;;;;;;;;;AC/EA,iE;AACA,kB;AACA,sB;AACA,oB;AACA,4B;AACA,yD;AACA,O;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,E;AACA,kD;AACA,G;;AAEA,4D;AACA,wC;AACA,8D;AACA,gE;AACA,8C;AACA,kG;AACA,U;AACA,wC;AACA,G;AACA,kB;AACA,E;;;;;;;;;;;;;;;;;;;;ACbA,oE;AACA,kB;AACA,sB;AACA,4C;AACA,4D;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,oD;AACA,mF;AACA,8B;AACA,wB;AACA,+C;AACA,mF;AACA,wE;AACA,gF;AACA,uC;AACA,c;AACA,gC;AACA,0B;AACA,kE;AACA,oB;AACA,qD;AACA,8C;AACA,gE;AACA,gG;AACA,4F;AACA,2F;AACA,kG;AACA,c;AACA,kC;AACA,4B;AACA,0E;AACA,0B;AACA,wB;AACA,uC;AACA,4D;AACA,8B;AACA,wB;AACA,sD;AACA,qF;AACA,gC;AACA,0B;AACA,uC;AACA,iC;AACA,mC;AACA,iC;AACA,mE;AACA,a;AACA,oC;AACA,iC;AACA,mE;AACA,a;AACA,wC;AACA,oC;AACA,iG;AACA,e;AACA,sD;AACA,6F;AACA,kC;AACA,4B;AACA,+C;AACA,0D;AACA,8B;AACA,mC;AACA,4B;AACA,gD;AACA,iE;AACA,wB;AACA,oB;AACA,Q;AACA,M;AACA,I;;AAEA,uE;AACA,kB;AACA,sB;AACA,mB;AACA,gD;AACA,mF;AACA,8D;AACA,qE;AACA,U;AACA,4B;AACA,sB;AACA,yB;AACA,S;AACA,iC;AACA,wE;AACA,0B;AACA,oB;AACA,yC;AACA,8B;AACA,4E;AACA,S;AACA,mB;AACA,2B;AACA,oB;AACA,0D;AACA,6D;AACA,4B;AACA,sB;AACA,oE;AACA,oB;AACA,2B;AACA,yB;AACA,iE;AACA,K;AACA,sD;AACA,2D;AACA,0B;AACA,oB;AACA,kE;AACA,gC;AACA,yB;AACA,iB;AACA,6F;AACA,4D;AACA,mE;AACA,S;AACA,yB;AACA,I;;AAEA,wE;AACA,kB;AACA,sB;AACA,mB;AACA,gD;AACA,mF;AACA,8D;AACA,qE;AACA,U;AACA,4B;AACA,sB;AACA,yB;AACA,S;AACA,kD;AACA,2D;AACA,0B;AACA,oB;AACA,kE;AACA,2B;AACA,yB;AACA,iE;AACA,K;AACA,2B;AACA,uD;AACA,6B;AACA,yB;AACA,uC;AACA,6E;AACA,4D;AACA,gE;AACA,uE;AACA,Q;AACA,0B;AACA,oB;AACA,gE;AACA,c;AACA,+C;AACA,wC;AACA,mF;AACA,2F;AACA,8C;AACA,Q;AACA,4B;AACA,sB;AACA,oE;AACA,wB;AACA,sD;AACA,I;;AAEA,uE;AACA,kB;AACA,sB;AACA,mB;AACA,gD;AACA,mF;AACA,8D;AACA,6D;AACA,U;AACA,4B;AACA,sB;AACA,yB;AACA,S;AACA,kD;AACA,2D;AACA,0B;AACA,oB;AACA,kE;AACA,2B;AACA,yB;AACA,iE;AACA,K;AACA,2B;AACA,uD;AACA,qC;AACA,iF;AACA,4D;AACA,2D;AACA,Q;AACA,0B;AACA,oB;AACA,qC;AACA,qC;AACA,kC;AACA,2B;AACA,mB;AACA,+F;AACA,8D;AACA,6D;AACA,W;AACA,sC;AACA,8B;AACA,yB;AACA,wD;AACA,Y;AACA,4E;AACA,oF;AACA,mF;AACA,M;AACA,0B;AACA,oB;AACA,0F;AACA,sB;AACA,wC;AACA,sD;AACA,qC;AACA,wB;AACA,+C;AACA,mG;AACA,iE;AACA,iE;AACA,yE;AACA,wE;AACA,Y;AACA,8B;AACA,wB;AACA,kD;AACA,mE;AACA,sB;AACA,8C;AACA,kC;AACA,yC;AACA,6B;AACA,kE;AACA,gB;AACA,wE;AACA,sC;AACA,U;AACA,8B;AACA,wB;AACA,sE;AACA,qF;AACA,Q;AACA,yC;AACA,+F;AACA,4D;AACA,4D;AACA,oE;AACA,mE;AACA,Q;AACA,0B;AACA,oB;AACA,sC;AACA,gC;AACA,sC;AACA,mD;AACA,yC;AACA,mF;AACA,Q;AACA,4C;AACA,uF;AACA,Q;AACA,4C;AACA,uF;AACA,O;AACA,kB;AACA,yC;AACA,2C;AACA,sD;AACA,I;;;;;;;;;;;;;;;;;;;AC3RA,6E;AACA,kD;AACA,yC;AACA,uC;AACA,U;AACA,qC;AACA,G;AACA,6B;AACA,kC;AACA,yB;AACA,8B;AACA,a;AACA,E;;AAEA,gH;AACA,8B;AACA,8B;AACA,oC;AACA,iD;AACA,gD;AACA,G;AACA,c;AACA,E;;AAEA,+F;AACA,uC;AACA,kE;AACA,E;;AAEA,gG;AACA,8D;AACA,yE;AACA,0E;AACA,U;AACA,kD;AACA,6C;AACA,I;AACA,E;;AAEA,+E;AACA,kD;AACA,kC;AACA,mC;AACA,G;AACA,+B;AACA,c;AACA,E;;AAEA,+E;AACA,kD;AACA,+B;AACA,c;AACA,E;;AAEA,oF;AACA,kD;AACA,+D;AACA,qC;AACA,+C;AACA,mG;AACA,U;AACA,yC;AACA,G;AACA,mB;AACA,E;;AAEA,+E;AACA,yC;AACA,uC;AACA,E;;AAEA,gF;AACA,6B;AACA,uC;AACA,E;;AAEA,gF;AACA,uB;AACA,U;AACA,2B;AACA,iC;AACA,qB;AACA,I;AACA,E;;AAEA,+E;AACA,6B;AACA,uC;AACA,E;;AAEA,+E;AACA,6B;AACA,U;AACA,2B;AACA,iC;AACA,qB;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;AChGA,oD;AACA,kB;AACA,sB;AACA,4C;AACA,gF;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,6C;AACA,iF;AACA,qE;AACA,4E;AACA,Y;AACA,8B;AACA,wB;AACA,gE;AACA,kB;AACA,mD;AACA,4C;AACA,wF;AACA,+F;AACA,Y;AACA,gC;AACA,0B;AACA,wE;AACA,wB;AACA,uC;AACA,4D;AACA,8B;AACA,wB;AACA,6D;AACA,kC;AACA,2E;AACA,a;AACA,kD;AACA,2F;AACA,gC;AACA,0B;AACA,2C;AACA,wD;AACA,0B;AACA,iC;AACA,0B;AACA,0C;AACA,gD;AACA,oB;AACA,Q;AACA,M;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,qB;AACA,4B;AACA,yD;AACA,O;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,K;AACA,I;;AAEA,qD;AACA,kB;AACA,sB;AACA,8B;AACA,qB;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,yD;AACA,O;AACA,uB;AACA,uB;AACA,yE;AACA,K;AACA,iB;AACA,6E;AACA,mD;AACA,Q;AACA,M;AACA,I;;AAEA,0D;AACA,kB;AACA,sB;AACA,6B;AACA,oE;AACA,0B;AACA,oB;AACA,4C;AACA,uB;AACA,yB;AACA,4E;AACA,Q;AACA,8B;AACA,2D;AACA,S;AACA,yB;AACA,yB;AACA,2E;AACA,O;AACA,mB;AACA,0E;AACA,kB;AACA,M;AACA,I;;AAEA,kD;AACA,kB;AACA,sB;AACA,8B;AACA,qB;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,yD;AACA,O;AACA,uB;AACA,uB;AACA,yE;AACA,K;AACA,iB;AACA,6E;AACA,mD;AACA,Q;AACA,M;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,6B;AACA,oE;AACA,0B;AACA,oB;AACA,4C;AACA,uB;AACA,yB;AACA,4E;AACA,Q;AACA,8B;AACA,2D;AACA,S;AACA,yB;AACA,yB;AACA,2E;AACA,O;AACA,mB;AACA,0E;AACA,kB;AACA,M;AACA,I;;AAEA,4D;AACA,kB;AACA,sB;AACA,mB;AACA,4B;AACA,4B;AACA,6E;AACA,O;AACA,iB;AACA,2F;AACA,K;AACA,I;;AAEA,wD;AACA,kB;AACA,sB;AACA,sB;AACA,4B;AACA,6E;AACA,O;AACA,+E;AACA,I;;AAEA,mD;AACA,kB;AACA,sB;AACA,sB;AACA,4B;AACA,6E;AACA,O;AACA,mC;AACA,oE;AACA,0B;AACA,oB;AACA,oC;AACA,8B;AACA,iE;AACA,S;AACA,mB;AACA,0E;AACA,mB;AACA,e;AACA,I;;AAEA,qD;AACA,kB;AACA,sB;AACA,wB;AACA,4B;AACA,6E;AACA,O;AACA,iB;AACA,wE;AACA,K;AACA,I;;AAEA,kD;AACA,kB;AACA,sB;AACA,qB;AACA,sB;AACA,yE;AACA,M;AACA,uB;AACA,0E;AACA,M;AACA,4B;AACA,6E;AACA,O;AACA,K;AACA,I;;AAEA,yD;AACA,kB;AACA,sB;AACA,4C;AACA,Y;AACA,gF;AACA,qC;AACA,kE;AACA,+D;AACA,M;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,oC;AACA,uB;AACA,gC;AACA,6D;AACA,W;AACA,2B;AACA,gF;AACA,8B;AACA,wB;AACA,6C;AACA,kE;AACA,W;AACA,+B;AACA,wB;AACA,wB;AACA,qB;AACA,Q;AACA,M;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,mB;AACA,+B;AACA,mF;AACA,8D;AACA,qE;AACA,U;AACA,4B;AACA,sB;AACA,yB;AACA,O;AACA,qC;AACA,wE;AACA,0B;AACA,oB;AACA,0D;AACA,iF;AACA,4B;AACA,sB;AACA,oE;AACA,oB;AACA,oD;AACA,+E;AACA,0B;AACA,oB;AACA,kE;AACA,uC;AACA,6F;AACA,4D;AACA,mE;AACA,S;AACA,c;AACA,I;;AAEA,wD;AACA,kB;AACA,sB;AACA,yD;AACA,6E;AACA,2D;AACA,Q;AACA,oC;AACA,6E;AACA,4D;AACA,gE;AACA,uE;AACA,Q;AACA,0B;AACA,oB;AACA,4D;AACA,c;AACA,+C;AACA,wC;AACA,mF;AACA,0F;AACA,Q;AACA,4B;AACA,sB;AACA,oE;AACA,oB;AACA,e;AACA,I;;AAEA,uD;AACA,kB;AACA,sB;AACA,yD;AACA,6E;AACA,2D;AACA,Q;AACA,kC;AACA,iF;AACA,4D;AACA,2D;AACA,Q;AACA,0B;AACA,oB;AACA,iC;AACA,2C;AACA,+B;AACA,+F;AACA,8D;AACA,6D;AACA,W;AACA,6B;AACA,oD;AACA,Y;AACA,4E;AACA,oF;AACA,mF;AACA,M;AACA,0B;AACA,oB;AACA,0F;AACA,sB;AACA,mC;AACA,sC;AACA,wD;AACA,gB;AACA,wE;AACA,sC;AACA,U;AACA,8B;AACA,wB;AACA,sE;AACA,yC;AACA,mG;AACA,iE;AACA,iE;AACA,yE;AACA,wE;AACA,Y;AACA,8B;AACA,wB;AACA,0C;AACA,yC;AACA,mC;AACA,iC;AACA,Q;AACA,mC;AACA,+F;AACA,4D;AACA,4D;AACA,oE;AACA,mE;AACA,Q;AACA,0B;AACA,oB;AACA,iC;AACA,gC;AACA,gC;AACA,mC;AACA,yC;AACA,mF;AACA,Q;AACA,4C;AACA,uF;AACA,Q;AACA,4C;AACA,uF;AACA,O;AACA,qC;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;AC3ZA,E;AACA,wC;AACA,G;;AAEA,mE;AACA,wC;AACA,+D;AACA,mC;AACA,sD;AACA,mB;AACA,E;;AAEA,uE;AACA,wB;AACA,gF;AACA,E;;AAEA,uF;AACA,yB;AACA,8B;AACA,iD;AACA,yC;AACA,G;AACA,c;AACA,E;;AAEA,+E;AACA,uC;AACA,kE;AACA,E;;AAEA,oC;AACA,8C;AACA,gC;AACA,+B;AACA,c;AACA,E;;AAEA,qD;AACA,iB;AACA,c;AACA,qB;AACA,I;AACA,sB;AACA,uB;AACA,G;AACA,c;AACA,E;;;;;;;;;;;;;;;;;;;AC9CA,6D;AACA,kB;AACA,sB;AACA,4C;AACA,gF;AACA,0B;AACA,oB;AACA,mF;AACA,sB;AACA,8E;AACA,kF;AACA,8B;AACA,wB;AACA,qD;AACA,sD;AACA,yB;AACA,2C;AACA,iF;AACA,qE;AACA,4E;AACA,Y;AACA,8B;AACA,wB;AACA,kE;AACA,kB;AACA,mD;AACA,4C;AACA,wF;AACA,+F;AACA,Y;AACA,gC;AACA,0B;AACA,wE;AACA,0B;AACA,kD;AACA,4D;AACA,8B;AACA,wB;AACA,6D;AACA,kC;AACA,2E;AACA,a;AACA,oD;AACA,2F;AACA,gC;AACA,0B;AACA,6C;AACA,wD;AACA,4B;AACA,iC;AACA,0B;AACA,8C;AACA,gD;AACA,oB;AACA,Q;AACA,M;AACA,I;;;;;;;;;;;;;;;;;;;ACzDA,kG;AACA,yB;AACA,8B;AACA,iD;AACA,yC;AACA,G;AACA,c;AACA,E;;AAEA,0F;AACA,uC;AACA,kE;AACA,E;;;;;;;;;;;;;;;;;;;ACXA,4D;AACA,kB;AACA,sB;AACA,oB;AACA,4B;AACA,yD;AACA,O;AACA,iB;AACA,6E;AACA,2D;AACA,Q;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,E;AACA,6C;AACA,G;;AAEA,uD;AACA,+B;AACA,sD;AACA,E;;;;;;;;;;;;;;;;;;;;ACNA,6C;AACA,kB;AACA,sB;AACA,oB;AACA,4B;AACA,yD;AACA,O;AACA,yC;AACA,kF;AACA,0B;AACA,oB;AACA,uF;AACA,8C;AACA,4B;AACA,sB;AACA,2C;AACA,kC;AACA,S;AACA,qB;AACA,e;AACA,I;;AAEA,8C;AACA,kB;AACA,sB;AACA,oC;AACA,wH;AACA,0B;AACA,oB;AACA,kD;AACA,oF;AACA,4B;AACA,sB;AACA,oF;AACA,kB;AACA,M;AACA,I;;AAEA,mD;AACA,kB;AACA,sB;AACA,oC;AACA,6H;AACA,0B;AACA,oB;AACA,kD;AACA,wG;AACA,4B;AACA,sB;AACA,oF;AACA,kB;AACA,M;AACA,I;;AAEA,iD;AACA,kB;AACA,sB;AACA,8C;AACA,4L;AACA,0B;AACA,oB;AACA,yC;AACA,0E;AACA,mC;AACA,+B;AACA,U;AACA,4B;AACA,sB;AACA,8D;AACA,iD;AACA,8B;AACA,wB;AACA,uE;AACA,sB;AACA,6B;AACA,sB;AACA,6C;AACA,iF;AACA,qC;AACA,iC;AACA,Y;AACA,8B;AACA,wB;AACA,kE;AACA,mD;AACA,gC;AACA,0B;AACA,wE;AACA,0B;AACA,+B;AACA,wB;AACA,0D;AACA,mF;AACA,uC;AACA,mC;AACA,c;AACA,gC;AACA,0B;AACA,8D;AACA,mM;AACA,kC;AACA,4B;AACA,kE;AACA,uD;AACA,oC;AACA,8B;AACA,0G;AACA,kC;AACA,8B;AACA,0B;AACA,sB;AACA,kB;AACA,Q;AACA,I;;AAEA,kD;AACA,kB;AACA,sB;AACA,8C;AACA,6L;AACA,0B;AACA,oB;AACA,kD;AACA,2L;AACA,4B;AACA,sB;AACA,sD;AACA,gB;AACA,sD;AACA,kD;AACA,U;AACA,8B;AACA,wB;AACA,0F;AACA,sB;AACA,kB;AACA,Q;AACA,I;;AAEA,iD;AACA,kB;AACA,sB;AACA,8C;AACA,4L;AACA,0B;AACA,oB;AACA,kD;AACA,0L;AACA,4B;AACA,sB;AACA,sD;AACA,iF;AACA,sC;AACA,kC;AACA,Y;AACA,8B;AACA,wB;AACA,0F;AACA,sB;AACA,kB;AACA,Q;AACA,I;;AAEA,iD;AACA,kB;AACA,sB;AACA,8C;AACA,4L;AACA,0B;AACA,oB;AACA,iD;AACA,+E;AACA,mC;AACA,+B;AACA,U;AACA,4B;AACA,sB;AACA,qD;AACA,+M;AACA,8B;AACA,wB;AACA,0D;AACA,mD;AACA,gC;AACA,0B;AACA,8F;AACA,yB;AACA,qB;AACA,kB;AACA,Q;AACA,I;;AAEA,kD;AACA,kB;AACA,sB;AACA,8C;AACA,6L;AACA,0B;AACA,oB;AACA,iD;AACA,+E;AACA,mC;AACA,gC;AACA,wC;AACA,U;AACA,4B;AACA,sB;AACA,qD;AACA,gM;AACA,8B;AACA,wB;AACA,yD;AACA,mD;AACA,gC;AACA,0B;AACA,8F;AACA,yB;AACA,qB;AACA,kB;AACA,Q;AACA,I;;AAEA,iD;AACA,kB;AACA,sB;AACA,8C;AACA,4L;AACA,0B;AACA,oB;AACA,kD;AACA,0L;AACA,4B;AACA,sB;AACA,sD;AACA,gB;AACA,sD;AACA,kD;AACA,U;AACA,8B;AACA,wB;AACA,0F;AACA,sB;AACA,kB;AACA,Q;AACA,I;;AAEA,oD;AACA,kB;AACA,sB;AACA,kD;AACA,+L;AACA,0B;AACA,oB;AACA,kD;AACA,+E;AACA,mC;AACA,+B;AACA,U;AACA,4B;AACA,sB;AACA,+C;AACA,gD;AACA,8B;AACA,wB;AACA,+C;AACA,4E;AACA,gC;AACA,0B;AACA,2C;AACA,2B;AACA,8B;AACA,iF;AACA,c;AACA,2C;AACA,iF;AACA,c;AACA,sC;AACA,qB;AACA,2B;AACA,iC;AACA,0B;AACA,+F;AACA,oD;AACA,kC;AACA,4B;AACA,iD;AACA,wC;AACA,e;AACA,6B;AACA,0B;AACA,sB;AACA,kB;AACA,Q;AACA,I;;;;;;;;;;;;;;;;;;;ACtSA,W;AACA,K;AACA,+B;AACA,a;AACA,wC;AACA,sB;AACA,I;AACA,6E;AACA,kD;AACA,K;AACA,iD;AACA,mC;AACA,oC;AACA,yE;AACA,4D;AACA,8B;AACA,4B;AACA,S;AACA,kC;AACA,0D;AACA,8B;AACA,4B;AACA,S;AACA,8D;AACA,0B;AACA,O;AACA,O;AACA,kB;AACA,I;AACA,K;AACA,gC;AACA,a;AACA,kF;AACA,4E;AACA,+E;AACA,uB;AACA,K;AACA,8C;AACA,mB;AACA,gC;AACA,wC;AACA,iG;AACA,sD;AACA,wB;AACA,O;AACA,kJ;AACA,8E;AACA,wB;AACA,O;AACA,O;AACA,iB;AACA,I;AACA,K;AACA,kC;AACA,a;AACA,4E;AACA,0C;AACA,I;AACA,2E;AACA,yE;AACA,uD;AACA,K;AACA,8C;AACA,sB;;AAEA,kB;AACA,oC;AACA,yD;AACA,gB;AACA,0F;AACA,6C;AACA,0C;;AAEA,8B;AACA,8B;AACA,K;AACA,4B;AACA,8B;AACA,K;AACA,oB;AACA,I;AACA,K;AACA,oC;AACA,a;AACA,2E;AACA,wB;AACA,I;AACA,oF;AACA,K;AACA,qD;AACA,oB;AACA,iD;AACA,Y;;AAEA,uD;AACA,uB;;AAEA,yB;AACA,2C;AACA,O;AACA,K;AACA,kB;AACA,I;AACA,K;AACA,6B;AACA,a;AACA,wB;AACA,6B;AACA,I;AACA,0E;AACA,kC;AACA,K;AACA,oC;AACA,yE;AACA,mC;AACA,2B;AACA,sB;AACA,Y;AACA,iB;AACA,K;AACA,I;AACA,K;AACA,2B;AACA,a;AACA,qB;AACA,mB;AACA,I;AACA,sE;AACA,0D;AACA,K;AACA,gC;AACA,kC;AACA,oC;AACA,6D;AACA,O;AACA,yB;AACA,K;AACA,e;AACA,I;AACA,K;AACA,4B;AACA,a;AACA,6B;AACA,yB;AACA,+C;AACA,I;AACA,8F;AACA,8F;AACA,+C;AACA,K;AACA,uC;AACA,mC;AACA,4D;AACA,K;;AAEA,+B;AACA,c;AACA,qD;AACA,gB;AACA,I;AACA,K;AACA,kC;AACA,a;AACA,yB;AACA,yB;AACA,sB;AACA,0D;AACA,K;AACA,mD;AACA,oC;AACA,gC;AACA,I;AACA,K;AACA,8B;AACA,a;AACA,yB;AACA,qB;AACA,I;AACA,+D;AACA,K;AACA,sC;AACA,oE;AACA,oC;AACA,+B;AACA,iC;AACA,uB;AACA,2C;AACA,4B;AACA,qF;AACA,8D;AACA,S;AACA,kC;AACA,iD;AACA,gC;AACA,gB;AACA,6C;AACA,qC;AACA,8C;AACA,iE;AACA,iC;AACA,wE;AACA,iC;AACA,W;AACA,S;AACA,kC;AACA,O;AACA,O;AACA,kB;AACA,I;AACA,K;AACA,kC;AACA,a;AACA,yB;AACA,wB;AACA,I;AACA,mF;AACA,K;AACA,8C;AACA,0B;AACA,uC;AACA,6B;AACA,kD;AACA,iD;AACA,qC;AACA,a;AACA,+D;AACA,gC;AACA,6B;AACA,S;AACA,S;AACA,K;AACA,I;AACA,K;AACA,+C;AACA,a;AACA,6B;AACA,2B;AACA,I;AACA,sF;AACA,kF;AACA,K;AACA,oF;AACA,oC;AACA,4C;AACA,a;AACA,uC;AACA,kB;AACA,c;AACA,uH;AACA,O;AACA,K;AACA,wE;AACA,wD;AACA,qB;AACA,oD;AACA,4D;AACA,2C;AACA,gB;AACA,8Q;AACA,S;AACA,c;AACA,gI;AACA,O;AACA,K;AACA,8D;AACA,+G;AACA,I;AACA,K;AACA,iD;AACA,a;AACA,sB;AACA,sB;AACA,I;AACA,uE;AACA,K;AACA,4E;AACA,6F;AACA,I;AACA,K;AACA,sC;AACA,a;AACA,iC;AACA,sB;AACA,I;AACA,0D;AACA,K;AACA,6D;AACA,mD;AACA,4B;AACA,I;AACA,K;AACA,sC;AACA,a;AACA,iC;AACA,sB;AACA,I;AACA,0D;AACA,K;AACA,6D;AACA,uC;AACA,mB;;AAEA,0E;AACA,oC;AACA,uE;AACA,kC;AACA,I;AACA,K;AACA,sC;AACA,a;AACA,wB;AACA,qB;AACA,I;AACA,+D;AACA,K;AACA,qD;AACA,kC;AACA,iB;AACA,kB;AACA,K;AACA,2B;AACA,iB;AACA,kB;AACA,K;AACA,kD;AACA,I;AACA,K;AACA,yC;AACA,a;AACA,wB;AACA,qB;AACA,I;AACA,wF;AACA,K;AACA,2D;AACA,qC;AACA,iB;AACA,kB;AACA,K;AACA,8B;AACA,iB;AACA,kB;AACA,K;AACA,qD;AACA,I;AACA,K;AACA,sE;AACA,a;AACA,wB;AACA,qB;AACA,I;AACA,8F;AACA,+F;AACA,2G;AACA,I;AACA,sI;AACA,kJ;AACA,K;AACA,qH;AACA,qE;AACA,I;AACA,K;AACA,uE;AACA,a;AACA,gC;AACA,sB;AACA,I;AACA,8F;AACA,K;AACA,6H;AACA,uC;AACA,mB;;AAEA,+C;AACA,6C;AACA,mE;AACA,4D;AACA,wH;AACA,I;AACA,K;AACA,2D;AACA,a;AACA,uB;AACA,0E;AACA,qB;AACA,I;AACA,6D;AACA,K;AACA,yG;AACA,yB;AACA,mB;AACA,iD;AACA,I;AACA,K;AACA,6D;AACA,a;AACA,8B;AACA,sB;AACA,I;AACA,gF;AACA,K;AACA,uG;AACA,qC;AACA,mB;;AAEA,6C;AACA,2C;AACA,2D;AACA,uG;AACA,I;AACA,K;AACA,qC;AACA,a;AACA,kG;AACA,mH;AACA,+C;AACA,I;AACA,6G;AACA,oG;AACA,qG;AACA,mD;AACA,K;AACA,sE;AACA,4B;AACA,uC;AACA,sD;AACA,uC;AACA,uE;AACA,K;;AAEA,yF;;AAEA,wE;AACA,8B;AACA,yE;AACA,iD;AACA,Y;AACA,6C;AACA,K;;AAEA,gD;;AAEA,2D;AACA,yD;AACA,kC;AACA,mC;AACA,4B;AACA,O;AACA,Y;AACA,gE;AACA,0D;AACA,+D;AACA,4B;AACA,8D;AACA,mD;AACA,wF;AACA,oC;AACA,4B;AACA,mC;AACA,gB;AACA,8B;AACA,S;AACA,O;AACA,K;;AAEA,Y;AACA,qB;AACA,wB;AACA,iB;AACA,gB;AACA,M;AACA,I;AACA,K;AACA,kC;AACA,a;AACA,yE;AACA,uF;AACA,K;AACA,0D;AACA,gC;AACA,4C;AACA,+B;AACA,oC;AACA,Y;AACA,e;AACA,K;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACveA,G;AACA,e;AACA,W;AACA,gC;AACA,E;AACA,sE;AACA,0D;AACA,G;AACA,gE;AACA,kB;AACA,kC;AACA,2E;AACA,4B;AACA,+B;AACA,uB;AACA,uC;AACA,yE;AACA,kD;AACA,yD;AACA,O;AACA,G;AACA,E;;AAEA,wD;AACA,kB;AACA,+C;AACA,iB;AACA,M;AACA,2C;AACA,E;;AAEA,yD;AACA,mE;AACA,C;;AAEA,uE;AACA,8C;AACA,E;;AAEA,2D;AACA,sC;AACA,E;;AAEA,mE;AACA,W;AACA,gE;AACA,iC;AACA,K;AACA,a;AACA,E;;;;;;;;;;;;;;;;;;;ACjDA,S;AACA,W;AACA,W;AACA,e;AACA,c;AACA,kB;AACA,kB;AACA,iB;AACA,kB;AACA,gB;AACA,oB;AACA,iB;AACA,G;AACA,E;;AAEA,2E;AACA,qB;AACA,qF;AACA,qC;AACA,qF;AACA,K;AACA,gG;AACA,sC;AACA,K;;AAEA,oB;AACA,kF;AACA,qC;AACA,oF;AACA,K;AACA,6F;AACA,qC;AACA,K;;AAEA,wB;AACA,uI;AACA,sB;AACA,8C;AACA,oG;AACA,O;;AAEA,mB;AACA,+B;AACA,O;;AAEA,wC;AACA,K;AACA,K;AACA,E;;AAEA,2D;AACA,W;AACA,gB;AACA,kG;AACA,gE;AACA,U;AACA,6D;AACA,iC;AACA,G;AACA,qB;AACA,E;;;;;;;;;;;;;;;;;;;AC5DA,0B;;AAEA,mB;AACA,6B;AACA,yC;AACA,uB;AACA,uB;AACA,e;AACA,+B;AACA,gB;AACA,I;AACA,G;AACA,kC;AACA,0C;AACA,G;AACA,wB;AACA,oB;AACA,G;AACA,uD;AACA,qB;AACA,6B;AACA,G;AACA,0D;AACA,mB;AACA,4B;AACA,qB;AACA,G;AACA,G;AACA,oD;AACA,iB;AACA,uB;AACA,4B;AACA,wB;AACA,sB;AACA,sC;AACA,wB;AACA,U;AACA,G;AACA,G;AACA,mC;AACA,4B;AACA,qB;AACA,G;AACA,G;AACA,+B;AACA,sC;AACA,G;AACA,kC;AACA,uB;AACA,uC;AACA,0D;AACA,iE;AACA,wB;AACA,U;AACA,e;AACA,G;AACA,G;AACA,sC;AACA,uB;AACA,iE;AACA,uE;AACA,iE;AACA,wB;AACA,U;AACA,e;AACA,G;AACA,G;AACA,4C;AACA,uB;AACA,iE;AACA,+C;AACA,6D;AACA,iC;AACA,U;AACA,e;AACA,G;AACA,G;AACA,mC;AACA,qB;AACA,G;AACA,mC;AACA,c;AACA,G;AACA,mC;AACA,a;AACA,oB;AACA,E;AACA,E;;AAEA,kB;AACA,8B;;AAEA,uE;AACA,+C;AACA,E;;;;;;;;;;;;;;;;;;AC9FA,kC;AACA,iB;AACA,iB;AACA,E;;AAEA,2D;AACA,iB;;AAEA,wB;AACA,S;;AAEA,uB;AACA,kB;AACA,S;AACA,iC;AACA,G;AACA,G;AACA,E;;AAEA,wE;AACA,iB;AACA,uB;;AAEA,iB;AACA,U;AACA,2C;AACA,8C;AACA,S;AACA,U;AACA,6C;AACA,sC;AACA,E;AACA,E;;AAEA,wF;AACA,iB;AACA,mC;AACA,c;AACA,Y;AACA,0C;AACA,4C;AACA,kC;AACA,G;AACA,E;AACA,iB;AACA,E;;;;;;;;;;;;;;;;;;AC7CA,0C;AACA,kB;AACA,iB;AACA,E;;AAEA,wG;AACA,wC;;AAEA,gF;AACA,2C;AACA,oC;AACA,kD;;AAEA,+E;AACA,kD;AACA,2C;AACA,kD;;AAEA,kD;AACA,E;;AAEA,+D;AACA,iB;;AAEA,uB;AACA,S;;AAEA,wB;AACA,E;;AAEA,8D;AACA,iB;AACA,uB;AACA,0B;AACA,E;;AAEA,4E;AACA,iB;AACA,uB;;AAEA,iC;AACA,iC;AACA,E;AACA,E;;AAEA,0H;AACA,iB;AACA,iC;;AAEA,4C;AACA,S;;AAEA,4G;AACA,sG;AACA,2E;AACA,0D;;AAEA,iE;AACA,oB;AACA,+C;AACA,kD;AACA,E;;AAEA,oB;AACA,uC;AACA,iI;;AAEA,uG;AACA,yB;AACA,yB;AACA,oC;AACA,qD;AACA,O;AACA,G;;AAEA,0B;AACA,G;;AAEA,4C;AACA,8B;AACA,wC;AACA,+C;AACA,yC;AACA,E;;AAEA,0E;AACA,iB;AACA,uB;;AAEA,iC;AACA,8B;AACA,4B;AACA,I;AACA,E;;AAEA,uC;AACA,oC;AACA,2C;AACA,yC;AACA,E;;AAEA,iE;AACA,iB;AACA,mD;AACA,iC;AACA,I;AACA,E;;AAEA,qE;AACA,iB;AACA,wB;AACA,E;;AAEA,4E;AACA,iB;AACA,iC;AACA,wC;AACA,yC;AACA,E;;AAEA,sE;AACA,iB;AACA,iC;AACA,wC;AACA,uC;AACA,E;;AAEA,sE;AACA,iB;AACA,iC;AACA,wC;AACA,uC;AACA,E;;AAEA,oF;AACA,iB;AACA,iC;AACA,wC;AACA,8C;AACA,E;;AAEA,wH;AACA,kB;AACA,kC;;AAEA,wC;AACA,U;AACA,G;;AAEA,0D;AACA,wF;;AAEA,gC;AACA,iD;;AAEA,mE;AACA,sB;AACA,iD;AACA,qD;AACA,I;;AAEA,kI;;AAEA,wG;AACA,0B;AACA,0B;AACA,qC;AACA,sD;AACA,Q;AACA,I;;AAEA,gD;AACA,oC;AACA,2C;AACA,2C;AACA,G;AACA,E;;AAEA,iJ;AACA,kB;AACA,kC;;AAEA,wC;AACA,U;AACA,G;;AAEA,0D;AACA,wF;;AAEA,gC;AACA,yD;AACA,qC;AACA,4C;AACA,4C;AACA,G;AACA,C;;AAEA,uE;AACA,mC;AACA,0D;AACA,yC;AACA,0B;;AAEA,qB;AACA,yC;AACA,iD;AACA,oC;AACA,4C;AACA,uC;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,mB;AACA,E;;;;;;;;;;;;;;;;;;ACtNA,+B;AACA,6C;AACA,wD;AACA,wG;AACA,wD;AACA,+E;AACA,wB;AACA,kC;;AAEA,qC;;AAEA,G;AACA,4B;AACA,U;AACA,6J;AACA,qJ;AACA,uB;AACA,E;AACA,2G;AACA,Q;AACA,G;AACA,wE;AACA,oC;AACA,wB;AACA,G;;AAEA,yC;AACA,iB;AACA,uD;AACA,U;AACA,uC;;AAEA,8C;AACA,kD;AACA,mB;AACA,kB;AACA,sB;AACA,sB;AACA,qB;AACA,sB;AACA,oB;AACA,wB;AACA,qB;AACA,Q;;AAEA,+D;AACA,O;AACA,G;AACA,E;;AAEA,G;AACA,yB;AACA,U;AACA,wB;AACA,uB;AACA,E;AACA,sF;AACA,Q;AACA,G;AACA,yD;AACA,4C;AACA,iD;AACA,K;AACA,E;;AAEA,G;AACA,6B;AACA,U;AACA,yB;AACA,uB;AACA,E;AACA,qC;AACA,G;AACA,yD;AACA,mC;AACA,W;AACA,G;;AAEA,sC;;AAEA,uB;AACA,iC;;AAEA,yB;AACA,sF;AACA,oF;AACA,4E;AACA,G;AACA,E;;AAEA,c;;AAEA,mC;AACA,2C;AACA,6E;AACA,6B;AACA,iC;AACA,E;;AAEA,qE;AACA,gC;AACA,yB;AACA,E;;AAEA,qC;AACA,4B;AACA,kB;AACA,qB;AACA,sB;AACA,wB;AACA,qB;AACA,iB;AACA,mB;AACA,0B;AACA,mB;AACA,gB;AACA,gB;AACA,uB;AACA,qB;AACA,sB;AACA,oB;AACA,E;AACA,6B;AACA,iC;AACA,oC;AACA,qC;AACA,uC;AACA,oC;AACA,gC;AACA,kC;AACA,yC;AACA,kC;AACA,+B;AACA,+B;AACA,sC;AACA,oC;AACA,qC;AACA,mC;AACA,E;;AAEA,G;AACA,6C;AACA,U;AACA,uB;AACA,2B;AACA,G;AACA,iG;AACA,yC;AACA,sD;AACA,G;AACA,8D;AACA,mN;AACA,G;AACA,wC;AACA,4C;AACA,E;;AAEA,G;AACA,6C;AACA,U;AACA,uB;AACA,iC;AACA,E;AACA,Y;AACA,G;AACA,uF;AACA,yC;AACA,sD;AACA,G;AACA,2C;AACA,oC;AACA,E;;AAEA,G;AACA,iC;AACA,U;AACA,2F;AACA,mB;AACA,E;AACA,4F;AACA,4F;AACA,+E;AACA,G;AACA,iE;AACA,uC;AACA,wC;AACA,sH;AACA,G;AACA,yE;AACA,wD;AACA,8B;AACA,+D;AACA,6C;AACA,E;;AAEA,G;AACA,iC;AACA,U;AACA,2F;AACA,wF;AACA,gB;AACA,E;AACA,sG;AACA,uG;AACA,G;AACA,4E;AACA,gD;AACA,gG;AACA,+C;AACA,4C;AACA,E;;AAEA,G;AACA,iC;AACA,U;AACA,oF;AACA,8F;AACA,8L;AACA,iC;AACA,E;AACA,0F;AACA,iE;AACA,G;AACA,uF;AACA,uC;AACA,wC;AACA,sH;AACA,G;;AAEA,+D;AACA,E;;AAEA,E;AACA,S;AACA,G;;AAEA,qE;AACA,uB;;AAEA,M;AACA,6B;AACA,Q;AACA,wC;;AAEA,iB;AACA,qE;;AAEA,mB;AACA,G;;AAEA,mC;AACA,mC;AACA,oC;AACA,qC;AACA,mC;AACA,oC;AACA,mC;AACA,gC;AACA,gF;AACA,a;;AAEA,yC;AACA,qE;AACA,qB;AACA,8B;AACA,wF;AACA,6E;AACA,G;AACA,E;AACA,0G;;AAEA,4B;AACA,qB;AACA,6D;AACA,kB;AACA,yJ;AACA,K;AACA,G;;AAEA,gB;AACA,4D;AACA,kB;AACA,iG;AACA,K;AACA,G;;AAEA,qD;AACA,gB;AACA,E;;AAEA,E;AACA,W;AACA,G;;AAEA,qD;AACA,8B;;AAEA,4E;AACA,mD;AACA,gE;AACA,sC;AACA,G;AACA,0E;AACA,6B;AACA,uF;AACA,4G;AACA,E;;AAEA,iF;AACA,qB;AACA,2C;AACA,sD;AACA,+D;;AAEA,2D;AACA,sD;AACA,+B;AACA,+B;AACA,G;;AAEA,W;AACA,+C;AACA,gB;AACA,oC;AACA,uC;AACA,sF;AACA,oC;AACA,O;AACA,kF;AACA,mB;AACA,iC;AACA,+B;AACA,U;AACA,+B;AACA,G;;AAEA,sE;AACA,4B;AACA,mB;AACA,2B;AACA,W;AACA,qB;AACA,e;AACA,yG;AACA,6B;AACA,0C;AACA,K;;AAEA,uC;AACA,sC;;AAEA,uF;AACA,wD;AACA,iC;;AAEA,qF;AACA,uC;AACA,sB;AACA,E;;AAEA,wD;AACA,kB;AACA,6C;AACA,8B;AACA,+B;AACA,E;;AAEA,4D;AACA,kB;AACA,wB;AACA,6C;;AAEA,mC;AACA,8B;AACA,iC;AACA,G;;AAEA,0B;AACA,yB;AACA,4B;AACA,G;;AAEA,kC;AACA,mC;;AAEA,6B;AACA,2B;AACA,8B;AACA,G;;AAEA,iC;AACA,sC;AACA,E;;AAEA,E;AACA,Y;AACA,G;;AAEA,2D;AACA,kF;AACA,G;;AAEA,mE;AACA,kE;AACA,gD;AACA,iG;;AAEA,U;AACA,yC;AACA,c;AACA,I;AACA,E;;AAEA,E;AACA,e;AACA,G;;AAEA,iE;AACA,2G;AACA,G;;AAEA,E;AACA,e;AACA,G;;AAEA,iE;AACA,2G;AACA,G;;AAEA,oE;AACA,yC;AACA,E;;AAEA,qC;AACA,iF;AACA,mF;AACA,gF;;AAEA,mB;AACA,oB;;AAEA,yC;AACA,2B;AACA,iG;AACA,4B;AACA,yC;;AAEA,iD;AACA,6C;AACA,0D;AACA,gC;AACA,G;;AAEA,kB;AACA,2D;;AAEA,oB;AACA,iH;;AAEA,wE;AACA,2D;AACA,E;AACA,2B;AACA,uH;AACA,E;AACA,8B;AACA,mF;AACA,E;;AAEA,E;AACA,gB;AACA,G;;AAEA,mE;AACA,6G;AACA,G;;AAEA,E;AACA,iB;AACA,G;;AAEA,qE;AACA,uF;AACA,G;;AAEA,+F;AACA,qD;AACA,E;;AAEA,E;AACA,e;AACA,G;;AAEA,iE;AACA,uG;AACA,G;;AAEA,yD;AACA,iE;AACA,yB;AACA,2C;AACA,kD;AACA,mB;AACA,2B;;AAEA,2C;AACA,sD;AACA,mF;;AAEA,U;AACA,iB;AACA,mB;AACA,I;AACA,E;;AAEA,E;AACA,gB;AACA,G;;AAEA,mE;AACA,yG;AACA,G;;AAEA,E;AACA,e;AACA,G;;AAEA,iE;AACA,2G;AACA,G;;AAEA,iD;AACA,wC;AACA,qC;;AAEA,+E;AACA,sB;AACA,uB;AACA,+B;AACA,sB;AACA,I;AACA,+D;AACA,sC;AACA,2C;AACA,K;AACA,K;;AAEA,sB;AACA,C;;AAEA,iD;AACA,wC;AACA,qC;;AAEA,+E;AACA,0C;AACA,+D;AACA,sC;AACA,8B;AACA,K;AACA,K;;AAEA,sB;AACA,C;;AAEA,iF;AACA,iE;AACA,mB;;AAEA,qD;AACA,qD;;AAEA,U;AACA,sH;AACA,gC;AACA,gC;AACA,8D;AACA,I;AACA,E;;AAEA,uE;AACA,iE;AACA,oD;AACA,kC;AACA,E;;AAEA,iF;AACA,iE;;AAEA,8E;AACA,oD;AACA,E;;AAEA,E;AACA,kB;AACA,G;;AAEA,uF;AACA,oE;AACA,2B;AACA,yB;AACA,sD;;AAEA,4F;AACA,E;AACA,6C;AACA,E;;AAEA,E;AACA,2B;AACA,G;;AAEA,kC;AACA,e;AACA,yC;AACA,wB;AACA,kD;;AAEA,gE;AACA,2F;AACA,gE;AACA,kD;AACA,+D;AACA,uD;AACA,wE;AACA,gC;AACA,8C;AACA,kD;AACA,oC;AACA,6C;AACA,kC;AACA,a;AACA,W;AACA,wC;AACA,+B;AACA,kC;AACA,uC;AACA,oB;AACA,mC;AACA,a;AACA,W;AACA,uB;AACA,S;AACA,oB;AACA,S;AACA,O;AACA,K;;AAEA,a;AACA,C;;AAEA,uD;AACA,8G;AACA,yB;AACA,E;;AAEA,8D;AACA,+E;;AAEA,sB;AACA,+B;;AAEA,kE;AACA,+D;AACA,+C;AACA,6B;;AAEA,8C;AACA,uD;AACA,8D;AACA,qC;AACA,K;;AAEA,6C;AACA,qF;AACA,oE;AACA,sC;AACA,gB;AACA,kD;AACA,wB;AACA,0B;AACA,O;AACA,qD;AACA,uB;AACA,0B;AACA,M;AACA,I;AACA,gB;AACA,E;;AAEA,E;AACA,qE;AACA,mD;AACA,qC;AACA,mC;AACA,2E;AACA,uC;AACA,G;AACA,wF;AACA,qC;AACA,yD;AACA,e;AACA,+C;AACA,sB;AACA,gC;AACA,O;AACA,K;;AAEA,wE;AACA,mE;AACA,2B;AACA,K;AACA,G;;AAEA,gD;AACA,uC;;AAEA,6B;AACA,8B;AACA,8D;AACA,kC;AACA,uC;AACA,+E;AACA,oD;AACA,0C;AACA,sE;AACA,6E;AACA,gB;AACA,+D;AACA,+D;AACA,6D;AACA,gC;AACA,kD;AACA,S;AACA,O;AACA,8B;AACA,4B;AACA,Y;AACA,iB;AACA,K;AACA,G;;AAEA,uE;AACA,0C;AACA,oC;AACA,+B;AACA,Y;AACA,sB;AACA,K;AACA,G;;AAEA,uB;AACA,yB;AACA,uC;AACA,4B;AACA,O;AACA,U;AACA,+B;AACA,G;;AAEA,qD;AACA,e;AACA,C;;AAEA,2F;AACA,6B;;AAEA,iE;AACA,yD;AACA,oE;AACA,8B;AACA,qB;AACA,kB;AACA,wB;AACA,kB;AACA,mB;AACA,qB;AACA,sB;AACA,uB;AACA,oB;AACA,mB;AACA,uB;AACA,sB;;AAEA,uD;AACA,oE;AACA,4B;AACA,G;;AAEA,8D;AACA,kC;AACA,4B;AACA,yC;AACA,4B;AACA,G;;AAEA,qE;AACA,qE;;AAEA,uC;AACA,0D;AACA,kD;AACA,4D;AACA,G;;AAEA,+B;AACA,qC;AACA,yB;AACA,2B;AACA,+B;AACA,2C;AACA,8C;AACA,mC;;AAEA,6B;AACA,oC;AACA,2D;AACA,oB;AACA,qE;AACA,qE;AACA,O;;AAEA,sC;AACA,O;AACA,G;AACA,mE;AACA,qC;AACA,iD;AACA,oC;AACA,G;;AAEA,sD;AACA,2C;AACA,kC;AACA,G;;AAEA,qD;AACA,uD;AACA,sD;AACA,+C;AACA,+F;AACA,kC;AACA,a;;AAEA,6F;AACA,2F;AACA,iC;AACA,iG;AACA,kC;AACA,Y;AACA,0D;AACA,oC;AACA,K;AACA,K;;AAEA,iD;AACA,mD;;AAEA,kC;AACA,gB;;AAEA,gC;AACA,mC;;AAEA,sB;AACA,6E;AACA,oB;AACA,8D;AACA,mC;AACA,+E;AACA,K;AACA,oC;AACA,oB;AACA,kI;AACA,yB;AACA,gC;AACA,O;AACA,wE;AACA,yC;AACA,yB;AACA,0B;AACA,6B;AACA,oB;AACA,uE;AACA,gF;AACA,6D;AACA,kB;AACA,0B;AACA,yB;AACA,W;AACA,O;AACA,K;AACA,8B;AACA,yC;AACA,0H;AACA,uB;AACA,wB;AACA,yB;AACA,yB;AACA,qE;AACA,8E;AACA,2D;AACA,uB;AACA,2B;AACA,uB;AACA,S;AACA,O;AACA,wC;AACA,gF;AACA,gC;AACA,K;AACA,uB;AACA,+C;AACA,wF;AACA,wC;AACA,K;AACA,uB;AACA,oH;AACA,8C;;AAEA,oE;AACA,6B;AACA,0E;;AAEA,yB;AACA,c;AACA,S;AACA,0B;AACA,yB;AACA,uE;AACA,gF;AACA,6D;AACA,uB;AACA,2B;AACA,4B;AACA,yB;AACA,U;AACA,S;AACA,0B;AACA,wB;AACA,uE;AACA,gF;AACA,6D;AACA,sB;AACA,0B;AACA,2B;AACA,yB;AACA,S;AACA,Q;AACA,K;AACA,I;AACA,2E;AACA,8B;AACA,Y;AACA,6J;AACA,gC;AACA,0B;AACA,4B;AACA,K;AACA,U;AACA,2B;AACA,wB;AACA,oB;AACA,8E;AACA,8B;AACA,S;AACA,8E;AACA,8B;AACA,S;AACA,oE;AACA,kC;AACA,S;AACA,c;AACA,kB;AACA,0E;AACA,2D;AACA,S;AACA,0E;AACA,2D;AACA,S;AACA,c;AACA,sB;AACA,0E;AACA,wF;AACA,S;AACA,0E;AACA,wF;AACA,S;AACA,c;AACA,4B;AACA,0E;AACA,wG;AACA,S;AACA,0E;AACA,wG;AACA,S;AACA,c;AACA,K;;AAEA,kD;AACA,sC;AACA,2F;AACA,e;AACA,gC;AACA,K;;AAEA,0B;AACA,uB;AACA,G;;AAEA,mF;AACA,wB;;AAEA,c;AACA,C;;AAEA,iD;AACA,6B;AACA,qE;;AAEA,oB;AACA,kB;AACA,qB;AACA,4B;AACA,wB;AACA,yB;AACA,iC;AACA,c;AACA,8B;AACA,O;AACA,Y;AACA,sB;AACA,K;AACA,gF;AACA,mB;AACA,8E;AACA,iB;AACA,kE;AACA,sB;AACA,qC;AACA,oB;AACA,mC;AACA,kB;AACA,sC;AACA,qB;AACA,8B;AACA,6B;AACA,8B;AACA,Y;AACA,gC;AACA,K;AACA,G;AACA,c;AACA,C;;AAEA,qC;AACA,kB;AACA,iB;AACA,yB;AACA,yC;AACA,mC;AACA,6B;AACA,2C;AACA,qC;AACA,iC;AACA,qC;AACA,I;;AAEA,0B;AACA,sC;AACA,E;AACA,8C;AACA,C;;AAEA,yE;AACA,wC;AACA,6B;AACA,G;;AAEA,8B;AACA,2C;AACA,+D;;AAEA,kE;AACA,6B;AACA,G;;AAEA,4E;AACA,iD;;AAEA,2B;AACA,kC;AACA,uC;AACA,0B;AACA,U;AACA,uC;AACA,2B;AACA,G;;AAEA,wE;AACA,kB;AACA,8D;AACA,6B;;AAEA,0D;;AAEA,6E;AACA,2B;AACA,2B;AACA,kB;AACA,uB;AACA,6B;AACA,qB;AACA,4B;AACA,2B;AACA,sB;AACA,8B;AACA,K;AACA,K;AACA,kE;AACA,yB;AACA,4B;AACA,qB;AACA,4B;AACA,2B;AACA,sB;AACA,8B;AACA,K;AACA,K;AACA,C;;AAEA,sD;AACA,sB;AACA,wF;AACA,2B;AACA,iC;AACA,4C;AACA,sB;AACA,qE;AACA,Y;AACA,W;AACA,G;AACA,mB;AACA,iE;AACA,E;;AAEA,8E;AACA,gD;AACA,oF;AACA,qC;AACA,0C;AACA,E;;;;;;;;;;;;;;;;;;AC/nCA,E;AACA,iB;AACA,G;AACA,4E;AACA,kD;AACA,oC;AACA,+G;AACA,G;;AAEA,0D;;AAEA,+E;AACA,G;;AAEA,E;AACA,mB;AACA,G;AACA,gF;AACA,kD;AACA,oC;AACA,2H;AACA,G;;AAEA,4D;;AAEA,4E;AACA,G;;AAEA,E;AACA,iC;AACA,G;AACA,4G;AACA,0E;;AAEA,mG;AACA,gF;AACA,yC;AACA,G;;AAEA,E;AACA,iC;AACA,G;AACA,4G;AACA,0E;;AAEA,mG;AACA,gF;AACA,yC;AACA,G;;AAEA,E;AACA,iB;AACA,G;AACA,4E;AACA,0D;;AAEA,0E;AACA,wC;AACA,G;;AAEA,E;AACA,uB;AACA,G;AACA,wF;AACA,gE;;AAEA,0E;AACA,4E;AACA,G;;AAEA,E;AACA,mB;AACA,G;AACA,gF;AACA,4D;;AAEA,wC;AACA,G;;AAEA,E;AACA,e;AACA,G;AACA,wE;AACA,wD;AACA,sB;AACA,0B;;AAEA,4C;AACA,iC;AACA,kB;AACA,wJ;AACA,oB;AACA,4F;AACA,I;AACA,wE;AACA,4C;;AAEA,iE;AACA,oE;AACA,mD;AACA,gC;AACA,O;AACA,U;AACA,kG;AACA,gD;AACA,G;;AAEA,mE;AACA,sC;AACA,mB;AACA,8J;AACA,oD;AACA,4E;AACA,kD;AACA,kE;AACA,O;AACA,G;;AAEA,oC;AACA,sE;AACA,qC;;AAEA,yE;AACA,gE;AACA,mB;;AAEA,yE;AACA,gE;AACA,mB;;AAEA,gB;AACA,K;;AAEA,+C;AACA,kC;;AAEA,mB;AACA,G;;AAEA,E;AACA,U;AACA,G;;AAEA,kD;AACA,wC;AACA,8B;AACA,uH;AACA,wB;AACA,Y;AACA,kF;AACA,G;;AAEA,8G;AACA,uC;AACA,C;;;;;;;;;;;;;;;;;;AC1JA,sD;AACA,mD;AACA,2B;AACA,6C;AACA,e;AACA,kB;AACA,yC;AACA,c;AACA,kC;AACA,O;AACA,6B;AACA,yD;AACA,O;AACA,K;AACA,K;AACA,a;AACA,C;;AAEA,wC;AACA,sC;AACA,W;AACA,2B;AACA,oD;AACA,qB;AACA,mD;AACA,6B;AACA,O;AACA,U;AACA,oG;AACA,mG;AACA,uB;AACA,mC;AACA,K;AACA,G;AACA,C;;AAEA,sC;AACA,sC;AACA,W;AACA,2B;AACA,kD;AACA,qB;AACA,iD;AACA,6B;AACA,O;AACA,U;AACA,oG;AACA,mG;AACA,uB;AACA,oC;AACA,K;AACA,I;AACA,C;;AAEA,0B;AACA,kE;AACA,kC;AACA,uB;AACA,+C;AACA,+C;AACA,+C;AACA,+C;AACA,4E;AACA,sC;;AAEA,U;AACA,iE;AACA,6C;AACA,wD;AACA,gC;AACA,mE;AACA,yC;AACA,iE;AACA,yC;AACA,mD;AACA,gD;;AAEA,mB;AACA,kE;AACA,kE;AACA,kE;AACA,0E;AACA,gE;AACA,gE;AACA,gE;AACA,wE;AACA,wD;AACA,oD;AACA,sD;;AAEA,4E;AACA,0B;AACA,6B;AACA,K;;AAEA,mC;AACA,+B;AACA,6B;AACA,8B;AACA,qE;AACA,kC;AACA,K;;AAEA,sE;AACA,wC;AACA,wC;AACA,2B;AACA,qG;AACA,wE;AACA,0B;AACA,yB;AACA,kB;AACA,wB;AACA,W;AACA,W;AACA,O;AACA,K;;AAEA,+B;AACA,oC;AACA,gC;AACA,sC;AACA,sD;AACA,yC;AACA,O;AACA,K;;AAEA,qC;AACA,4C;AACA,6D;AACA,oB;AACA,oC;AACA,sD;AACA,wC;AACA,a;AACA,gB;AACA,mE;AACA,6B;AACA,yC;AACA,kC;AACA,W;AACA,0D;AACA,yC;AACA,a;AACA,S;AACA,wD;AACA,wC;AACA,W;AACA,uE;AACA,oC;AACA,Q;AACA,K;;AAEA,4E;AACA,+B;AACA,mB;AACA,oE;AACA,oC;;AAEA,yE;AACA,4E;AACA,iD;AACA,S;AACA,uB;AACA,gC;AACA,O;AACA,uB;AACA,+F;AACA,O;AACA,oE;AACA,a;AACA,K;;AAEA,6B;AACA,mD;;AAEA,kE;AACA,6D;AACA,gE;AACA,yE;AACA,2C;AACA,kC;;AAEA,gC;AACA,6H;AACA,4J;;AAEA,yE;AACA,wE;AACA,sD;AACA,+D;AACA,oB;AACA,yB;AACA,+B;AACA,2D;AACA,uB;AACA,wB;AACA,wB;AACA,gC;AACA,O;AACA,O;;AAEA,4B;AACA,qC;AACA,6C;AACA,uF;AACA,6B;AACA,gC;AACA,6D;AACA,gC;AACA,iC;AACA,0B;AACA,kC;AACA,S;AACA,S;AACA,iD;AACA,kC;AACA,oD;AACA,+D;AACA,W;AACA,mC;AACA,O;AACA,oB;AACA,K;;AAEA,yE;AACA,wH;AACA,8B;AACA,K;;AAEA,oB;AACA,8B;AACA,qB;AACA,qB;AACA,2B;AACA,sC;AACA,Q;AACA,2C;AACA,oE;AACA,gF;AACA,S;AACA,uB;AACA,gC;AACA,O;AACA,K;;AAEA,6E;AACA,+E;AACA,wE;AACA,8E;AACA,6E;AACA,mB;AACA,uB;AACA,8F;AACA,O;AACA,6E;AACA,uF;AACA,gC;AACA,O;AACA,qG;AACA,0B;AACA,+D;AACA,iC;AACA,mE;AACA,gC;AACA,c;AACA,yB;AACA,+F;AACA,S;AACA,+E;AACA,qB;AACA,+E;AACA,8E;AACA,4D;AACA,qE;AACA,0B;AACA,+B;AACA,qC;AACA,iE;AACA,8B;AACA,6B;AACA,8B;AACA,sC;AACA,a;AACA,a;AACA,gF;AACA,oC;AACA,W;AACA,S;AACA,yF;AACA,O;AACA,K;;AAEA,mE;AACA,oD;AACA,iB;AACA,mG;AACA,2E;AACA,iE;AACA,sB;AACA,2B;AACA,iC;AACA,6D;AACA,sE;AACA,0B;AACA,0B;AACA,kC;AACA,S;AACA,S;AACA,uB;AACA,4D;AACA,gC;AACA,O;AACA,+F;AACA,K;AACA,I;AACA,6E;AACA,uE;AACA,sE;AACA,kH;AACA,+E;AACA,oH;AACA,K;AACA,I;AACA,2E;AACA,uE;AACA,6G;AACA,iJ;AACA,gH;AACA,K;AACA,I;AACA,kE;AACA,2D;AACA,a;AACA,a;;AAEA,yB;AACA,gC;AACA,0B;AACA,uB;AACA,4E;AACA,6D;AACA,S;;AAEA,0E;AACA,yE;AACA,K;AACA,kE;AACA,6G;AACA,iJ;AACA,gE;AACA,K;AACA,I;AACA,gE;AACA,uB;AACA,6C;AACA,+B;AACA,sB;AACA,mC;AACA,6B;AACA,yC;AACA,K;AACA,I;AACA,oE;AACA,qE;AACA,uE;AACA,2B;AACA,+B;AACA,6B;AACA,K;AACA,I;AACA,oF;AACA,gH;;AAEA,2B;;AAEA,mC;AACA,+D;AACA,+D;AACA,2B;AACA,6B;AACA,kD;AACA,iC;;AAEA,iC;AACA,qF;AACA,I;AACA,8E;AACA,2B;;AAEA,wE;AACA,yD;AACA,qC;AACA,+C;AACA,oF;AACA,oF;AACA,6B;AACA,kD;AACA,iC;;AAEA,qE;AACA,G;AACA,G","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  autoform: Match.Optional(Object)\n});","\nTemplate.__define__(\"quickForm_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"qfAutoFormContext\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", UI.Each(function() {\n        return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n          fields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\"),\n          omitFields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n      \", Spacebars.TemplateWith(function() {\n          return {\n            name: Spacebars.call(self.lookup(\".\")),\n            options: Spacebars.call(\"auto\"),\n            fields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"fields\")),\n            omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"omitFields\"))\n          };\n        }, UI.block(function() {\n          var self = this;\n          return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n        })), \"\\n    \" ];\n      })), \"\\n    \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"qfNeedsButton\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON({\n          $dynamic: [ function() {\n            return Spacebars.attrMustache(self.lookup(\"submitButtonAtts\"));\n          } ]\n        }, \"\\n      \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n      \", function() {\n            return Spacebars.mustache(self.lookup(\".\"));\n          }, \"\\n      \" ];\n        }), UI.block(function() {\n          var self = this;\n          return \"\\n      Submit\\n      \";\n        })), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      })), \"\\n  \" ];\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afFieldLabel_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.LABEL({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  });\n}));\n\nTemplate.__define__(\"afCheckbox_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"checkbox\"\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT({\n    type: \"checkbox\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }), \"\\n      \", function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"name\")\n    }));\n  }, \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"afCheckboxGroup_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"checkbox\"\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n      },\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"atts\"));\n      } ]\n    }), \"\\n        \", function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    }, \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afRadio_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"radio\"\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT({\n    type: \"radio\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }), \"\\n      \", function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"name\")\n    }));\n  }, \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"afRadioGroup_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"radio\"\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT({\n      type: \"radio\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n      },\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"atts\"));\n      } ]\n    }), \"\\n        \", function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    }, \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afContenteditable_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.include(self.lookupTemplate(\"afContenteditable_plain\"));\n}));\n\nTemplate.__define__(\"afFieldSelect_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SELECT({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, \"\\n    \", Spacebars.include(function() {\n    return Spacebars.dot(self.lookup(\".\"), \"contentBlock\");\n  }), \"\\n  \");\n}));\n\nTemplate.__define__(\"afSelect_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SELECT({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, \"\\n    \", UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n      \", HTML.OPTION({\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"optionAtts\"));\n      } ]\n    }, function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    }), \"\\n    \" ];\n  })), \"\\n  \");\n}));\n\nTemplate.__define__(\"afTextarea_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.TEXTAREA({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n  });\n}));\n\nTemplate.__define__(\"afInput_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.INPUT({\n    type: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"type\"));\n    },\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  });\n}));\n\nTemplate.__define__(\"afDeleteButton_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return {\n      collection: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"collection\")),\n      type: Spacebars.call(\"remove\"),\n      doc: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"doc\")),\n      id: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"id\"))\n    };\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n  \", HTML.BUTTON({\n        type: \"submit\",\n        $dynamic: [ function() {\n          return Spacebars.attrMustache(self.lookup(\"atts\"));\n        } ]\n      }, UI.If(function() {\n        return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"contentBlock\"));\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(function() {\n          return Spacebars.dot(self.lookup(\"..\"), \"contentBlock\");\n        });\n      }), UI.block(function() {\n        var self = this;\n        return \"Delete\";\n      }))), \"\\n  \" ];\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afQuickField_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": [ \"form-group \", UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return \"has-error\";\n    })) ]\n  }, \"\\n    \", UI.Unless(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"skipLabel\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.TemplateWith(function() {\n      return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"afFieldLabelAtts\"));\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afFieldLabel\"));\n    })), \"\\n    \" ];\n  })), \"\\n    \", Spacebars.TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"afFieldInputAtts\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afFieldInput\"));\n  })), \"\\n    \", HTML.SPAN({\n    \"class\": \"help-block\"\n  }, function() {\n    return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n    })));\n  }), \"\\n  \");\n}));\n\nTemplate.__define__(\"afObjectField_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"panel panel-default\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": \"panel-heading\"\n  }, \"\\n      \", HTML.H3({\n    \"class\": \"panel-title\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }), \"\\n    \"), \"\\n    \", HTML.DIV({\n    \"class\": \"panel-body\"\n  }, \"\\n      \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n      \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, function() {\n      return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n      })));\n    }), \"\\n      \" ];\n  })), \"\\n      \", UI.Each(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      fields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"fields\"),\n      omitFields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"omitFields\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", Spacebars.TemplateWith(function() {\n      return {\n        name: Spacebars.call(self.lookup(\".\")),\n        options: Spacebars.call(\"auto\"),\n        fields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\")),\n        omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\"))\n      };\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n    })), \"\\n      \" ];\n  })), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"afArrayField_bootstrap3\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": \"panel panel-default\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": \"panel-heading\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }), \"\\n    \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"panel-body has-error\"\n    }, \"\\n      \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, function() {\n      return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n      })));\n    }), \"\\n    \"), \"\\n    \" ];\n  })), \"\\n    \", HTML.UL({\n    \"class\": \"list-group\"\n  }, \"\\n      \", Spacebars.TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afEachArrayItem\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", HTML.LI({\n        \"class\": \"list-group-item autoform-array-item\"\n      }, \"\\n        \", HTML.DIV({\n        \"class\": \"media\"\n      }, \"\\n          \", UI.If(function() {\n        return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"name\"),\n          autoform: Spacebars.dot(self.lookup(\"..\"), \"autoform\"),\n          minCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n          \", HTML.BUTTON({\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"\n        }, HTML.SPAN({\n          \"class\": \"glyphicon glyphicon-minus\"\n        })), \"\\n          \" ];\n      })), \"\\n          \", HTML.DIV({\n        \"class\": \"media-body\"\n      }, \"\\n            \", Spacebars.TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false),\n          options: Spacebars.call(\"auto\"),\n          fields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\")),\n          omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\"))\n        };\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n      })), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];\n    }));\n  })), \"\\n      \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\"),\n      minCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n      \", HTML.LI({\n      \"class\": \"list-group-item\"\n    }, \"\\n        \", HTML.BUTTON({\n      \"class\": \"btn btn-primary autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, HTML.SPAN({\n      \"class\": \"glyphicon glyphicon-plus\"\n    })), \"\\n      \"), \"\\n      \" ];\n  })), \"\\n    \"), \"\\n  \");\n}));\n","/*\n * Template helpers for \"bootstrap3\" template\n */\n\nTemplate['afFieldLabel_bootstrap3'].atts = function bsFieldLabelAtts() {\n  var atts = (this || {}).atts;\n  var labelAtts = _.omit(atts, 'name', 'autoform', 'template');\n  // Add bootstrap class if necessary\n  if (typeof labelAtts['class'] === \"string\") {\n    labelAtts['class'] += \" control-label\"; //might be added twice but that shouldn't hurt anything\n  } else {\n    labelAtts['class'] = \"control-label\";\n  }\n  // Add \"for\" attribute if missing\n  labelAtts['for'] = labelAtts['for'] || atts['name'];\n  return labelAtts;\n};\n\nTemplate['afDeleteButton_bootstrap3'].atts = function bsDeleteButtonAtts() {\n  var atts = this || {};\n  var buttonAtts = _.omit(atts, '_af', 'collection', 'doc', 'contentBlock', 'type', 'id');\n  // Add bootstrap class if necessary\n  if (typeof buttonAtts['class'] === \"string\") {\n    buttonAtts['class'] += \" btn btn-danger\"; //might be added twice but that shouldn't hurt anything\n  } else {\n    buttonAtts['class'] = \"btn btn-danger\";\n  }\n  return buttonAtts;\n};\n\nTemplate['quickForm_bootstrap3'].submitButtonAtts = function bsQuickFormSubmitButtonAtts() {\n  var qfAtts = this.atts;\n  var atts = {type: \"submit\"};\n  atts['class'] = 'btn btn-primary';\n  if (typeof qfAtts.buttonClasses === \"string\") {\n    atts['class'] += ' ' + qfAtts.buttonClasses;\n  }\n  return atts;\n};\n\nTemplate['quickForm_bootstrap3'].qfNeedsButton = function bsQuickFormNeedsButton() {\n  var submitType = this._af.submitType;\n  return (submitType !== \"readonly\" && submitType !== \"disabled\");\n};\n\nfunction addFormControlAtts() {\n  var atts = _.clone(this.atts);\n  if (typeof atts[\"class\"] === \"string\") {\n    atts[\"class\"] += \" form-control\";\n  } else {\n    atts[\"class\"] = \"form-control\";\n  }\n  return atts;\n}\n\nTemplate[\"afFieldSelect_bootstrap3\"].atts = addFormControlAtts;\nTemplate[\"afSelect_bootstrap3\"].atts = addFormControlAtts;\nTemplate[\"afTextarea_bootstrap3\"].atts = addFormControlAtts;\nTemplate[\"afInput_bootstrap3\"].atts = addFormControlAtts;\n\nTemplate[\"afCheckbox_bootstrap3\"].atts = \nTemplate[\"afRadio_bootstrap3\"].atts =\nTemplate[\"afCheckboxGroup_bootstrap3\"].atts = \nTemplate[\"afRadioGroup_bootstrap3\"].atts = function () {\n  var atts = _.clone(this.atts);\n  if (this.selected) {\n    atts.checked = \"\";\n  }\n  return atts;\n};\n\nTemplate[\"afSelect_bootstrap3\"].optionAtts = function () {\n  var item = this\n  var atts = {\n    value: item.value\n  };\n  if (item.selected) {\n    atts.selected = \"\";\n  }\n  return atts;\n};","\nTemplate.__define__(\"afFieldLabel_bootstrap3-span\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SPAN({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  });\n}));\n","/*\n * Template helpers for \"bootstrap3-span\" template\n */\n\nTemplate['afFieldLabel_bootstrap3-span'].atts = function() {\n  var atts = (_.clone(this || {})).atts;\n  var spanAtts = _.omit(atts, 'name', 'autoform', 'template');\n  // Add bootstrap class if necessary; TODO use custom templates\n  if (typeof spanAtts['class'] === \"string\") {\n    spanAtts['class'] += \" control-label\"; //might be added twice but that shouldn't hurt anything\n  } else {\n    spanAtts['class'] = \"control-label\";\n  }\n  return spanAtts;\n};\n","\nTemplate.__define__(\"quickForm_bootstrap3-horizontal\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return Spacebars.call(self.lookup(\"qfAutoFormContext\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", Spacebars.With(function() {\n        return Spacebars.dataMustache(self.lookup(\"qfClasses\"), self.lookup(\"..\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n    \", UI.Each(function() {\n          return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n            fields: Spacebars.dot(self.lookup(\"...\"), \"atts\", \"fields\"),\n            omitFields: Spacebars.dot(self.lookup(\"...\"), \"atts\", \"omitFields\"),\n            autoform: self.lookup(\"..\")\n          }));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n      \", Spacebars.TemplateWith(function() {\n            return {\n              name: Spacebars.call(self.lookup(\".\")),\n              options: Spacebars.call(\"auto\"),\n              template: Spacebars.call(\"bootstrap3-horizontal\"),\n              \"input-col-class\": Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"inputClass\")),\n              \"label-class\": Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"labelClass\")),\n              fields: Spacebars.call(Spacebars.dot(self.lookup(\"....\"), \"atts\", \"fields\")),\n              omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"....\"), \"atts\", \"omitFields\"))\n            };\n          }, UI.block(function() {\n            var self = this;\n            return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n          })), \"\\n    \" ];\n        })), \"\\n    \" ];\n      })), \"\\n    \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"qfNeedsButton\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n    \", Spacebars.With(function() {\n          return Spacebars.dataMustache(self.lookup(\"qfClasses\"), self.lookup(\"..\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n    \", HTML.DIV({\n            \"class\": \"form-group\"\n          }, \"\\n      \", HTML.DIV({\n            \"class\": function() {\n              return Spacebars.mustache(self.lookup(\"labelClass\"));\n            }\n          }), \"\\n      \", HTML.DIV({\n            \"class\": function() {\n              return Spacebars.mustache(self.lookup(\"inputClass\"));\n            }\n          }, \"\\n        \", HTML.BUTTON({\n            $dynamic: [ function() {\n              return Spacebars.attrMustache(self.lookup(\"submitButtonAtts\"), self.lookup(\"...\"));\n            } ]\n          }, \"\\n        \", Spacebars.With(function() {\n            return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"buttonContent\"));\n          }, UI.block(function() {\n            var self = this;\n            return [ \"\\n        \", function() {\n              return Spacebars.mustache(self.lookup(\".\"));\n            }, \"\\n        \" ];\n          }), UI.block(function() {\n            var self = this;\n            return \"\\n        Submit\\n        \";\n          })), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n        })), \"\\n    \" ];\n      })), \"\\n  \" ];\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afQuickField_bootstrap3-horizontal\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": [ \"form-group \", UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return \"has-error\";\n    })) ]\n  }, \"\\n    \", UI.If(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"skipLabel\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \\n    \", HTML.LABEL({\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"afEmptyFieldLabelAtts\"));\n      } ]\n    }), \"\\n    \" ];\n  }), UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.TemplateWith(function() {\n      return Spacebars.call(self.lookup(\"afFieldLabelAtts\"));\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afFieldLabel\"));\n    })), \"\\n    \" ];\n  })), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(self.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n        \", Spacebars.TemplateWith(function() {\n    return Spacebars.call(self.lookup(\"afFieldInputAtts\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afFieldInput\"));\n  })), \"\\n        \", HTML.SPAN({\n    \"class\": \"help-block\"\n  }, function() {\n    return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n    })));\n  }), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"afObjectField_bootstrap3-horizontal\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": [ \"form-group \", UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return \"has-error\";\n    })) ]\n  }, \"\\n    \", Spacebars.TemplateWith(function() {\n    return Spacebars.call(self.lookup(\"afFieldLabelAtts\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afFieldLabel\"));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(self.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"panel panel-default autoform-padding-fix\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": \"panel-body\"\n  }, \"\\n        \", UI.Each(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      fields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"fields\"),\n      omitFields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"omitFields\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n          \", Spacebars.TemplateWith(function() {\n      return {\n        name: Spacebars.call(self.lookup(\".\")),\n        options: Spacebars.call(\"auto\"),\n        fields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\")),\n        omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\")),\n        template: Spacebars.call(\"bootstrap3\")\n      };\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n    })), \"\\n        \" ];\n  })), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__define__(\"afArrayField_bootstrap3-horizontal\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": [ \"form-group \", UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return \"has-error\";\n    })) ]\n  }, \"\\n    \", Spacebars.TemplateWith(function() {\n    return Spacebars.call(self.lookup(\"afFieldLabelAtts\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afFieldLabel\"));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(self.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"panel panel-default autoform-padding-fix\"\n  }, \"\\n        \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"panel-body has-error\"\n    }, \"\\n          \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, function() {\n      return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n      })));\n    }), \"\\n        \"), \"\\n        \" ];\n  })), \"\\n        \", HTML.UL({\n    \"class\": \"list-group\"\n  }, \"\\n          \", Spacebars.TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afEachArrayItem\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n          \", HTML.LI({\n        \"class\": \"list-group-item autoform-array-item\"\n      }, \"\\n            \", HTML.DIV({\n        \"class\": \"media\"\n      }, \"\\n              \", UI.If(function() {\n        return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"name\"),\n          autoform: Spacebars.dot(self.lookup(\"..\"), \"autoform\"),\n          minCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n              \", HTML.BUTTON({\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"\n        }, HTML.SPAN({\n          \"class\": \"glyphicon glyphicon-minus\"\n        })), \"\\n              \" ];\n      })), \"\\n              \", HTML.DIV({\n        \"class\": \"media-body\"\n      }, \"\\n                \", Spacebars.TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false)\n        };\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n      })), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];\n    }));\n  })), \"\\n          \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\"),\n      minCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n          \", HTML.LI({\n      \"class\": \"list-group-item\"\n    }, \"\\n            \", HTML.BUTTON({\n      \"class\": \"btn btn-primary autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, HTML.SPAN({\n      \"class\": \"glyphicon glyphicon-plus\"\n    })), \"\\n          \"), \"\\n          \" ];\n  })), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");\n}));\n","Template[\"quickForm_bootstrap3-horizontal\"].qfAutoFormContext = function () {\n  var ctx = _.clone(this.qfAutoFormContext || {});\n  if (typeof ctx[\"class\"] === \"string\") {\n    ctx[\"class\"] += \" form-horizontal\";\n  } else {\n    ctx[\"class\"] = \"form-horizontal\";\n  }\n  if (ctx[\"input-col-class\"])\n    delete ctx[\"input-col-class\"];\n  if (ctx[\"label-class\"])\n    delete ctx[\"label-class\"];\n  return ctx;\n};\n\nTemplate['quickForm_bootstrap3-horizontal'].submitButtonAtts = function bsQuickFormSubmitButtonAtts(qfContext) {\n  var qfAtts = qfContext.atts;\n  var atts = {type: \"submit\"};\n  atts['class'] = 'btn btn-primary';\n  if (typeof qfAtts.buttonClasses === \"string\") {\n    atts['class'] += ' ' + qfAtts.buttonClasses;\n  }\n  return atts;\n};\n\nTemplate['quickForm_bootstrap3-horizontal'].qfNeedsButton = function bsQuickFormNeedsButton() {\n  var submitType = this._af.submitType;\n  return (submitType !== \"readonly\" && submitType !== \"disabled\");\n};\n\nTemplate['quickForm_bootstrap3-horizontal'].qfClasses = function bsQuickFormClasses(qfContext) {\n  // This helper is a workaround for the fact that it does not\n  // seem to work currently to do input-col-class=../atts.input-col-class\n  // in the template because dashes in the attribute value cause problems.\n  return {\n    inputClass: qfContext.atts[\"input-col-class\"],\n    labelClass: qfContext.atts[\"label-class\"]\n  };\n};\n\nTemplate[\"afQuickField_bootstrap3-horizontal\"].afFieldInputAtts = function () {\n  var atts = _.clone(this.afFieldInputAtts || {});\n  if ('input-col-class' in atts) {\n    delete atts['input-col-class'];\n  }\n  atts.template = \"bootstrap3\";\n  return atts;\n};\n\nTemplate[\"afQuickField_bootstrap3-horizontal\"].afFieldLabelAtts = function () {\n  var atts = _.clone(this.afFieldLabelAtts || {});\n  atts.template = \"bootstrap3\";\n  return atts;\n};\n\nTemplate[\"afQuickField_bootstrap3-horizontal\"].afEmptyFieldLabelAtts = function () {\n  var atts = _.clone(this.afFieldLabelAtts || {});\n  var labelAtts = _.omit(atts, 'name', 'autoform', 'template');\n  // Add bootstrap class if necessary\n  if (typeof labelAtts['class'] === \"string\") {\n    labelAtts['class'] += \" control-label\"; //might be added twice but that shouldn't hurt anything\n  } else {\n    labelAtts['class'] = \"control-label\";\n  }\n  return labelAtts;\n};\n\nTemplate[\"afQuickField_bootstrap3-horizontal\"].rightColumnClass = function () {\n  var atts = this.afFieldInputAtts || {};\n  return atts['input-col-class'] || \"\";\n};\n\nTemplate[\"afObjectField_bootstrap3-horizontal\"].rightColumnClass = function () {\n  var atts = this.atts || {};\n  return atts['input-col-class'] || \"\";\n};\n\nTemplate[\"afObjectField_bootstrap3-horizontal\"].afFieldLabelAtts = function () {\n  var atts = this.atts;\n  return {\n    template: \"bootstrap3\",\n    \"class\": atts[\"label-class\"],\n    \"name\": atts.name\n  };\n};\n\nTemplate[\"afArrayField_bootstrap3-horizontal\"].rightColumnClass = function () {\n  var atts = this.atts || {};\n  return atts['input-col-class'] || \"\";\n};\n\nTemplate[\"afArrayField_bootstrap3-horizontal\"].afFieldLabelAtts = function () {\n  var atts = this.atts || {};\n  return {\n    template: \"bootstrap3\",\n    \"class\": atts[\"label-class\"],\n    \"name\": atts.name\n  };\n};","\nTemplate.__define__(\"quickForm_plain\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"qfAutoFormContext\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", UI.Each(function() {\n        return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n          fields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\"),\n          omitFields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n      \", Spacebars.TemplateWith(function() {\n          return {\n            name: Spacebars.call(self.lookup(\".\")),\n            options: Spacebars.call(\"auto\"),\n            fields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"fields\")),\n            omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"omitFields\"))\n          };\n        }, UI.block(function() {\n          var self = this;\n          return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n        })), \"\\n    \" ];\n      })), \"\\n    \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"qfNeedsButton\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON({\n          $dynamic: [ function() {\n            return Spacebars.attrMustache(self.lookup(\"submitButtonAtts\"));\n          } ]\n        }, \"\\n      \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n      \", function() {\n            return Spacebars.mustache(self.lookup(\".\"));\n          }, \"\\n      \" ];\n        }), UI.block(function() {\n          var self = this;\n          return \"\\n      Submit\\n      \";\n        })), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      })), \"\\n  \" ];\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afFieldLabel_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.LABEL({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  });\n}));\n\nTemplate.__define__(\"afCheckbox_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV(HTML.INPUT({\n    type: \"checkbox\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }), \" \", HTML.LABEL({\n    \"for\": function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"name\")\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afCheckboxGroup_plain\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV(HTML.INPUT({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n      },\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"atts\"));\n      } ]\n    }), \" \", HTML.LABEL({\n      \"for\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n      }\n    }, function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afRadio_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV(HTML.INPUT({\n    type: \"checkbox\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }), \" \", HTML.LABEL({\n    \"for\": function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"name\")\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afRadioGroup_plain\", (function() {\n  var self = this;\n  var template = this;\n  return UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV(HTML.INPUT({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n      },\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"atts\"));\n      } ]\n    }), \" \", HTML.LABEL({\n      \"for\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n      }\n    }, function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afContenteditable_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    contenteditable: \"true\",\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(Spacebars.dot(self.lookup(\".\"), \"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.makeRaw(Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\")));\n  });\n}));\n\nTemplate.__define__(\"afFieldSelect_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SELECT({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(Spacebars.dot(self.lookup(\".\"), \"atts\"));\n    } ]\n  }, \"\\n    \", Spacebars.include(self.lookupTemplate(\"contentBlock\")), \"\\n  \");\n}));\n\nTemplate.__define__(\"afSelect_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SELECT({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(Spacebars.dot(self.lookup(\".\"), \"atts\"));\n    } ]\n  }, \"\\n    \", UI.Each(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"items\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.OPTION({\n      $dynamic: [ function() {\n        return Spacebars.attrMustache(self.lookup(\"optionAtts\"));\n      } ]\n    }, function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"label\"));\n    }), \"\\n    \" ];\n  })), \"\\n  \");\n}));\n\nTemplate.__define__(\"afTextarea_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.TEXTAREA({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(Spacebars.dot(self.lookup(\".\"), \"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n  });\n}));\n\nTemplate.__define__(\"afInput_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.INPUT({\n    type: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"type\"));\n    },\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"value\"));\n    },\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(Spacebars.dot(self.lookup(\".\"), \"atts\"));\n    } ]\n  });\n}));\n\nTemplate.__define__(\"afDeleteButton_plain\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return {\n      collection: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"collection\")),\n      type: Spacebars.call(\"remove\"),\n      doc: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"doc\")),\n      id: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"id\"))\n    };\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n  \", HTML.BUTTON({\n        type: \"submit\",\n        $dynamic: [ function() {\n          return Spacebars.attrMustache(self.lookup(\"atts\"));\n        } ]\n      }, UI.If(function() {\n        return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"contentBlock\"));\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(function() {\n          return Spacebars.dot(self.lookup(\"..\"), \"contentBlock\");\n        });\n      }), UI.block(function() {\n        var self = this;\n        return \"Delete\";\n      }))), \"\\n  \" ];\n    }));\n  }));\n}));\n\nTemplate.__define__(\"afQuickField_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.DIV({\n    \"class\": UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return \"has-error\";\n    }))\n  }, \"\\n    \", UI.Unless(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"skipLabel\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.TemplateWith(function() {\n      return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"afFieldLabelAtts\"));\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afFieldLabel\"));\n    })), \"\\n    \" ];\n  })), \"\\n    \", Spacebars.TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"afFieldInputAtts\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afFieldInput\"));\n  })), \"\\n    \", HTML.SPAN(function() {\n    return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"atts\", \"autoform\")\n    })));\n  }), \"\\n  \");\n}));\n\nTemplate.__define__(\"afObjectField_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }), \"\\n    \", UI.Each(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      fields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"fields\"),\n      omitFields: Spacebars.dot(self.lookup(\".\"), \"atts\", \"omitFields\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n      \", Spacebars.TemplateWith(function() {\n      return {\n        name: Spacebars.call(self.lookup(\".\")),\n        options: Spacebars.call(\"auto\"),\n        fields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\")),\n        omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\"))\n      };\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n    })), \"\\n    \" ];\n  })), \"\\n  \");\n}));\n\nTemplate.__define__(\"afArrayField_plain\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }), \"\\n    \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"autoform-array-field-error\"\n    }, \"\\n      \", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(self.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n        autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\")\n      })));\n    }, \"\\n    \"), \"\\n    \" ];\n  })), \"\\n    \", Spacebars.TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"afEachArrayItem\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", HTML.DIV({\n        \"class\": \"autoform-array-item\"\n      }, \"\\n      \", Spacebars.TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false)\n        };\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n      })), \"\\n      \", UI.If(function() {\n        return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"name\"),\n          autoform: Spacebars.dot(self.lookup(\"..\"), \"autoform\"),\n          minCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n      \", HTML.BUTTON({\n          \"class\": \"autoform-remove-item\"\n        }, \"Remove\"), \"\\n      \" ];\n      })), \"\\n    \"), \"\\n    \" ];\n    }));\n  })), \"\\n    \", UI.If(function() {\n    return Spacebars.dataMustache(self.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"),\n      autoform: Spacebars.dot(self.lookup(\".\"), \"autoform\"),\n      minCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", HTML.DIV({\n      style: \"margin-top: 20px;\"\n    }, \"\\n      \", HTML.BUTTON({\n      \"class\": \"autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];\n  })), \"\\n  \");\n}));\n","/*\n * Template helpers for \"plain\" template\n */\n\nTemplate['afFieldLabel_plain'].atts = function plFieldLabelAtts() {\n  var atts = (_.clone(this || {})).atts;\n  var labelAtts = _.omit(atts, 'name', 'autoform', 'template');\n  // Add \"for\" attribute if missing\n  labelAtts['for'] = labelAtts['for'] || atts['name'];\n  return labelAtts;\n};\n\nTemplate['afDeleteButton_plain'].atts = function plDeleteButtonAtts() {\n  var atts = this || {};\n  return _.omit(atts, '_af', 'collection', 'doc', 'contentBlock', 'type', 'id');\n};\n\nTemplate['quickForm_plain'].submitButtonAtts = function plQuickFormSubmitButtonAtts() {\n  var qfAtts = this.atts;\n  var atts = {type: \"submit\"};\n  if (typeof qfAtts.buttonClasses === \"string\") {\n    atts['class'] = qfAtts.buttonClasses;\n  }\n  return atts;\n};\n\nTemplate['quickForm_plain'].qfNeedsButton = function plQuickFormNeedsButton() {\n  var submitType = this._af.submitType;\n  return (submitType !== \"readonly\" && submitType !== \"disabled\");\n};\n\nTemplate[\"afCheckbox_plain\"].atts = \nTemplate[\"afRadio_plain\"].atts = function () {\n  var atts = _.clone(this.atts);\n  atts.checked = this.selected;\n  return atts;\n};\n\nTemplate[\"afSelect_plain\"].optionAtts = function () {\n  var item = this\n  var atts = {\n    value: item.value\n  };\n  if (item.selected) {\n    atts.selected = \"\";\n  }\n  return atts;\n};","\nTemplate.__define__(\"quickForm_plain-fieldset\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"qfAutoFormContext\"));\n  }, UI.block(function() {\n    var self = this;\n    return Spacebars.include(self.lookupTemplate(\"autoForm\"), UI.block(function() {\n      var self = this;\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {\n        return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"legend\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n      \", HTML.LEGEND(function() {\n          return Spacebars.mustache(self.lookup(\".\"));\n        }), \"\\n      \" ];\n      })), \"\\n      \", UI.Each(function() {\n        return Spacebars.dataMustache(self.lookup(\"afFieldNames\"), Spacebars.kw({\n          fields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"fields\"),\n          omitFields: Spacebars.dot(self.lookup(\"..\"), \"atts\", \"omitFields\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.TemplateWith(function() {\n          return {\n            name: Spacebars.call(self.lookup(\".\")),\n            options: Spacebars.call(\"auto\"),\n            fields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"fields\")),\n            omitFields: Spacebars.call(Spacebars.dot(self.lookup(\"...\"), \"atts\", \"omitFields\"))\n          };\n        }, UI.block(function() {\n          var self = this;\n          return Spacebars.include(self.lookupTemplate(\"afQuickField\"));\n        })), \"\\n      \" ];\n      })), \"\\n    \"), \"\\n    \", UI.If(function() {\n        return Spacebars.call(self.lookup(\"qfNeedsButton\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON({\n          $dynamic: [ function() {\n            return Spacebars.attrMustache(self.lookup(\"submitButtonAtts\"));\n          } ]\n        }, \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(self.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n        \", function() {\n            return Spacebars.mustache(self.lookup(\".\"));\n          }, \"\\n        \" ];\n        }), UI.block(function() {\n          var self = this;\n          return \"\\n        Submit\\n        \";\n        })), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      })), \"\\n  \" ];\n    }));\n  }));\n}));\n","Template['quickForm_plain-fieldset'].submitButtonAtts = function plfsQuickFormSubmitButtonAtts() {\n  var qfAtts = this.atts;\n  var atts = {type: \"submit\"};\n  if (typeof qfAtts.buttonClasses === \"string\") {\n    atts['class'] = qfAtts.buttonClasses;\n  }\n  return atts;\n};\n\nTemplate['quickForm_plain-fieldset'].qfNeedsButton = function plfsQuickFormNeedsButton() {\n  var submitType = this._af.submitType;\n  return (submitType !== \"readonly\" && submitType !== \"disabled\");\n};","\nTemplate.__define__(\"afFieldLabel_plain-span\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.SPAN({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(self.lookup(\".\"), \"atts\", \"name\")\n    }));\n  });\n}));\n","/*\n * Template helpers for \"plain-span\" template\n */\n\nTemplate['afFieldLabel_plain-span'].atts = function() {\n  var atts = (this || {}).atts;\n  return _.omit(atts, 'name', 'autoform', 'template');\n};\n","\nTemplate.__define__(\"autoForm\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.FORM({\n    $dynamic: [ function() {\n      return Spacebars.attrMustache(self.lookup(\"atts\"));\n    } ]\n  }, \"\\n  \t\", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"innerContext\"), self.lookup(\"..\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", UI.InTemplateScope(template, Spacebars.TemplateWith(function() {\n      return Spacebars.call(self.lookup(\".\"));\n    }, UI.block(function() {\n      var self = this;\n      return Spacebars.include(function() {\n        return template.__content;\n      });\n    }))), \"\\n    \" ];\n  })), \"\\n  \");\n}));\n\nTemplate.__define__(\"quickForm\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"quickForm\", Spacebars.dot(self.lookup(\".\"), \"template\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"innerContext\"), self.lookup(\"..\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afDeleteButton\", (function() {\n  var self = this;\n  var template = this;\n  return Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afDeleteButton\", Spacebars.dot(self.lookup(\".\"), \"template\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"innerContext\"), self.lookup(\"..\"), template.__content);\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n    \" ];\n    })), \"\\n  \" ];\n  }));\n}));\n\nTemplate.__define__(\"afQuickField\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afQuickField\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", UI.If(function() {\n      return Spacebars.dataMustache(self.lookup(\"isGroup\"), Spacebars.kw({\n        autoform: self.lookup(\".\"),\n        atts: self.lookup(\"..\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.TemplateWith(function() {\n        return Spacebars.call(self.lookup(\"..\"));\n      }, UI.block(function() {\n        var self = this;\n        return Spacebars.include(self.lookupTemplate(\"afObjectField\"));\n      })), \"\\n    \" ];\n    }), UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", UI.If(function() {\n        return Spacebars.dataMustache(self.lookup(\"isFieldArray\"), Spacebars.kw({\n          autoform: self.lookup(\".\"),\n          atts: self.lookup(\"..\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.TemplateWith(function() {\n          return Spacebars.call(self.lookup(\"..\"));\n        }, UI.block(function() {\n          var self = this;\n          return Spacebars.include(self.lookupTemplate(\"afArrayField\"));\n        })), \"\\n      \" ];\n      }), UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.With(function() {\n          return Spacebars.dataMustache(self.lookup(\"innerContext\"), Spacebars.kw({\n            autoform: self.lookup(\".\"),\n            atts: self.lookup(\"..\")\n          }));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n          \", Spacebars.With(function() {\n            return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afQuickField\", Spacebars.dot(self.lookup(\"...\"), \"template\"), Spacebars.dot(self.lookup(\"...\"), \"name\"), self.lookup(\"..\"));\n          }, UI.block(function() {\n            var self = this;\n            return [ \"\\n            \", Spacebars.With(function() {\n              return Spacebars.call(self.lookup(\"..\"));\n            }, UI.block(function() {\n              var self = this;\n              return [ \"\\n            \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n            \" ];\n            })), \"\\n          \" ];\n          })), \"\\n        \" ];\n        })), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afObjectField\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afObjectField\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afObjectField\", Spacebars.dot(self.lookup(\"..\"), \"template\"), Spacebars.dot(self.lookup(\"..\"), \"name\"), self.lookup(\".\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.With(function() {\n        return {\n          autoform: Spacebars.call(self.lookup(\"..\")),\n          atts: Spacebars.call(self.lookup(\"...\"))\n        };\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afArrayField\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afArrayField\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afArrayField\", Spacebars.dot(self.lookup(\"..\"), \"template\"), Spacebars.dot(self.lookup(\"..\"), \"name\"), self.lookup(\".\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.With(function() {\n        return Spacebars.dataMustache(self.lookup(\"innerContext\"), Spacebars.kw({\n          autoform: self.lookup(\"..\"),\n          atts: self.lookup(\"...\")\n        }));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afFieldInput\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afFieldInput\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n\t  \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"innerContext\"), Spacebars.kw({\n        autoform: self.lookup(\".\"),\n        atts: self.lookup(\"..\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n\t    \", Spacebars.With(function() {\n        return Spacebars.dataMustache(self.lookup(\"getTemplate\"), self.lookup(\"getTemplateType\"), Spacebars.dot(self.lookup(\"...\"), \"template\"), Spacebars.dot(self.lookup(\"...\"), \"name\"), self.lookup(\"..\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(self.lookup(\"..\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n        \" ];\n        })), \"\\n\t    \" ];\n      })), \"\\n\t  \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afFieldSelect\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afFieldSelect\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n\t  \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"innerContext\"), Spacebars.kw({\n        autoform: self.lookup(\".\"),\n        atts: self.lookup(\"..\"),\n        contentBlock: template.__content\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n\t    \", Spacebars.With(function() {\n        return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afFieldSelect\", Spacebars.dot(self.lookup(\"...\"), \"template\"), Spacebars.dot(self.lookup(\"...\"), \"name\"), self.lookup(\"..\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n\t      \", Spacebars.With(function() {\n          return Spacebars.call(self.lookup(\"..\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n        \" ];\n        })), \"\\n\t    \" ];\n      })), \"\\n\t  \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afFieldLabel\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afFieldLabel\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"getTemplate\"), \"afFieldLabel\", Spacebars.dot(self.lookup(\"..\"), \"template\"), Spacebars.dot(self.lookup(\"..\"), \"name\"), self.lookup(\".\"));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", Spacebars.With(function() {\n        return {\n          autoform: Spacebars.call(self.lookup(\"..\")),\n          atts: Spacebars.call(self.lookup(\"...\"))\n        };\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n        \", Spacebars.include(self.lookupTemplate(\"..\")), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n\nTemplate.__define__(\"afEachArrayItem\", (function() {\n  var self = this;\n  var template = this;\n  return [ \"\\n  \\n  \", Spacebars.With(function() {\n    return Spacebars.dataMustache(self.lookup(\"_af_findAutoForm\"), \"afEachArrayItem\", self.lookup(\"..\"), self.lookup(\"...\"), self.lookup(\"....\"), self.lookup(\".....\"), self.lookup(\"......\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n    \", Spacebars.With(function() {\n      return Spacebars.dataMustache(self.lookup(\"innerContext\"), Spacebars.kw({\n        autoform: self.lookup(\".\"),\n        atts: self.lookup(\"..\")\n      }));\n    }, UI.block(function() {\n      var self = this;\n      return [ \"\\n      \", UI.Each(function() {\n        return Spacebars.call(self.lookup(\".\"));\n      }, UI.block(function() {\n        var self = this;\n        return [ \"\\n      \", UI.If(function() {\n          return Spacebars.call(Spacebars.dot(self.lookup(\".\"), \"removed\"));\n        }, UI.block(function() {\n          var self = this;\n          return [ \"\\n      \", HTML.INPUT({\n            type: \"hidden\",\n            name: function() {\n              return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n            },\n            \"data-schema-key\": function() {\n              return Spacebars.mustache(Spacebars.dot(self.lookup(\".\"), \"name\"));\n            },\n            \"data-null-value\": \"true\",\n            value: \"\"\n          }), \"\\n      \" ];\n        }), UI.block(function() {\n          var self = this;\n          return [ \"\\n      \", UI.InTemplateScope(template, Spacebars.TemplateWith(function() {\n            return Spacebars.call(self.lookup(\".\"));\n          }, UI.block(function() {\n            var self = this;\n            return Spacebars.include(function() {\n              return template.__content;\n            });\n          }))), \"\\n      \" ];\n        })), \"\\n      \" ];\n      })), \"\\n    \" ];\n    })), \"\\n  \" ];\n  })) ];\n}));\n","Utility = {\n  /**\n   * @method Utility.cleanNulls\n   * @private\n   * @param {Object} doc - Source object\n   * @returns {Object}\n   *\n   * Returns an object in which all properties with null, undefined, or empty\n   * string values have been removed, recursively.\n   */\n  cleanNulls: function cleanNulls(doc, isArray) {\n    var newDoc = isArray ? [] : {};\n    _.each(doc, function(val, key) {\n      if (!_.isArray(val) && !(val instanceof Date) && _.isObject(val)) {\n        val = cleanNulls(val, false); //recurse into objects\n        if (!_.isEmpty(val)) {\n          newDoc[key] = val;\n        }\n      } else if (_.isArray(val)) {\n        val = cleanNulls(val, true); //recurse into arrays\n        if (!_.isEmpty(val)) {\n          newDoc[key] = val;\n        }\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {\n        newDoc[key] = val;\n      }\n    });\n    return newDoc;\n  },\n  /**\n   * @method Utility.reportNulls\n   * @private\n   * @param {Object} flatDoc - An object with no properties that are also objects.\n   * @returns {Object} An object in which the keys represent the keys in the\n   * original object that were null, undefined, or empty strings, and the value\n   * of each key is \"\".\n   */\n  reportNulls: function reportNulls(flatDoc) {\n    var nulls = {};\n    // Loop through the flat doc\n    _.each(flatDoc, function(val, key) {\n      // If value is undefined, null, or an empty string, report this as null so it will be unset\n      if (Utility.isNullUndefinedOrEmptyString(val)) {\n        nulls[key] = \"\";\n      }\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true).length === 0) {\n        nulls[key] = \"\";\n      }\n    });\n    return nulls;\n  },\n  /**\n   * @method Utility.docToModifier\n   * @private\n   * @param {Object} doc - An object to be converted into a MongoDB modifier\n   * @returns {Object} A MongoDB modifier.\n   *\n   * Converts an object into a modifier by flattening it, putting keys with\n   * null, undefined, and empty string values into `modifier.$unset`, and\n   * putting the rest of the keys into `modifier.$set`.\n   */\n  docToModifier: function docToModifier(doc) {\n    var modifier = {};\n\n    // Flatten doc\n    var mDoc = new MongoObject(doc);\n    var flatDoc = mDoc.getFlatObject({keepArrays: true});\n    mDoc = null;\n    // Get a list of null, undefined, and empty string values so we can unset them instead\n    var nulls = Utility.reportNulls(flatDoc);\n    flatDoc = Utility.cleanNulls(flatDoc);\n\n    if (!_.isEmpty(flatDoc)) {\n      modifier.$set = flatDoc;\n    }\n    if (!_.isEmpty(nulls)) {\n      modifier.$unset = nulls;\n    }\n    return modifier;\n  },\n  /**\n   * @method Utility.getSelectValues\n   * @private\n   * @param {Element} select - DOM Element from which to get current values\n   * @returns {string[]}\n   *\n   * Gets a string array of all the selected values in a given `select` DOM element.\n   */\n  getSelectValues: function getSelectValues(select) {\n    var result = [];\n    var options = select && select.options || [];\n    var opt;\n\n    for (var i = 0, ln = options.length; i < ln; i++) {\n      opt = options[i];\n\n      if (opt.selected) {\n        result.push(opt.value || opt.text);\n      }\n    }\n    return result;\n  },\n  /**\n   * @method Utility.maybeNum\n   * @private\n   * @param {string} val\n   * @returns {String|Number}\n   *\n   * If the given string can be converted to a number, returns the number.\n   * Otherwise returns the string.\n   */\n  maybeNum: function maybeNum(val) {\n    // Convert val to a number if possible; otherwise, just use the value\n    var floatVal = parseFloat(val);\n    if (!isNaN(floatVal)) {\n      return floatVal;\n    } else {\n      return val;\n    }\n  },\n  /**\n   * @method Utility.lookup\n   * @private\n   * @param {Any} obj\n   * @returns {Any}\n   *\n   * If `obj` is a string, returns the value of the property with that\n   * name on the `window` object. Otherwise returns `obj`.\n   */\n  lookup: function lookup(obj) {\n    if (typeof obj === \"string\") {\n      if (!window || !window[obj]) {\n        throw new Error(obj + \" is not in the window scope\");\n      }\n      return window[obj];\n    }\n    return obj;\n  },\n  /**\n   * @method Utility.getDefs\n   * @private\n   * @param {SimpleSchema} ss\n   * @param {String} name\n   * @return {Object} Schema definitions object\n   *\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid\n   * field name for this SimpleSchema instance.\n   */\n  getDefs: function getDefs(ss, name) {\n    if (typeof name !== \"string\") {\n      throw new Error(\"Invalid field name: (not a string)\");\n    }\n\n    var defs = ss.schema(name);\n    if (!defs)\n      throw new Error(\"Invalid field name: \" + name);\n    return defs;\n  },\n  /**\n   * @method Utility.objAffectsKey\n   * @private\n   * @param  {Object} obj\n   * @param  {String} key\n   * @return {Boolean}\n   * @todo should make this a static method in MongoObject\n   */\n  objAffectsKey: function objAffectsKey(obj, key) {\n    var mDoc = new MongoObject(obj);\n    return mDoc.affectsKey(key);\n  },\n  /**\n   * @method Utility.expandObj\n   * @private\n   * @param  {Object} doc\n   * @return {Object}\n   *\n   * Takes a flat object and returns an expanded version of it.\n   */\n  expandObj: function expandObj(doc) {\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;\n    _.each(doc, function(val, key) {\n      subkeys = key.split(\".\");\n      subkeylen = subkeys.length;\n      current = newDoc;\n      for (var i = 0; i < subkeylen; i++) {\n        subkey = subkeys[i];\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {\n          break; //already set for some reason; leave it alone\n        }\n        if (i === subkeylen - 1) {\n          //last iteration; time to set the value\n          current[subkey] = val;\n        } else {\n          //see if the next piece is a number\n          nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {\n            current[subkey] = {};\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {\n            current[subkey] = [];\n          }\n        }\n        current = current[subkey];\n      }\n    });\n    return newDoc;\n  },\n  /**\n   * @method Utility.compactArrays\n   * @private\n   * @param  {Object} obj\n   * @return {undefined}\n   *\n   * Edits the object by reference, compacting any arrays at any level recursively.\n   */\n  compactArrays: function compactArrays(obj) {\n    if (_.isObject(obj)) {\n      _.each(obj, function (val, key) {\n        if (_.isArray(val)) {\n          obj[key] = _.without(val, void 0, null);\n          _.each(obj[key], function (arrayItem) {\n            compactArrays(arrayItem);\n          });\n        } else if (!(val instanceof Date) && _.isObject(val)) {\n          //recurse into objects\n          compactArrays(val);\n        }\n      });\n    }\n  },\n  /**\n   * @method Utility.getSimpleSchemaFromContext\n   * @private\n   * @param  {Object} context\n   * @return {SimpleSchema}\n   *\n   * Given a context object that may or may not have schema and collection properties,\n   * returns a SimpleSchema instance or throws an error if one cannot be obtained.\n   */\n  getSimpleSchemaFromContext: function getSimpleSchemaFromContext(context, formId) {\n    // If schema attribute, use that\n    var ss = Utility.lookup(context.schema);\n    if (ss) {\n      if (ss instanceof SimpleSchema) {\n        return ss;\n      } else {\n        throw new Error('AutoForm: schema attribute for form with id \"' + formId + '\" is not a SimpleSchema instance');\n      }\n    }\n    // If no schema attribute, use the schema attached to the collection\n    var collection = Utility.lookup(context.collection);\n    if (collection) {\n      if (collection instanceof Meteor.Collection) {\n        if (typeof collection.simpleSchema === 'function') {\n          return collection.simpleSchema();\n        } else {\n          throw new Error('AutoForm: collection attribute for form with id \"' + formId + '\" refers to a collection that does not have a schema. You might have forgotten to attach a schema to the collection or you might need to add the collection2 package to your app.');\n        }\n      } else {\n        throw new Error('AutoForm: collection attribute for form with id \"' + formId + '\" is not a Meteor.Collection instance');\n      }\n    }\n    // If we got this far, we have no schema so throw an error\n    throw new Error('AutoForm: form with id \"' + formId + '\" needs either \"schema\" or \"collection\" attribute');\n  },\n  /**\n   * @method Utility.isNullUndefinedOrEmptyString\n   * @private\n   * @param  {Any} val\n   * @return {Boolean}\n   *\n   * Returns `true` if the value is null, undefined, or an empty string\n   */\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));\n  },\n  /**\n   * @method Utility.isValidDateString\n   * @private\n   * @param  {String}  dateString\n   * @return {Boolean}\n   *\n   * Returns `true` if dateString is a \"valid date string\"\n   */\n  isValidDateString: function isValidDateString(dateString) {\n    var m = moment(dateString, 'YYYY-MM-DD', true);\n    return m && m.isValid();\n  },\n  /**\n   * @method Utility.isValidTimeString\n   * @private\n   * @param  {String}  timeString\n   * @return {Boolean}\n   *\n   * Returns `true` if timeString is a \"valid time string\"\n   */\n  isValidTimeString: function isValidTimeString(timeString) {\n    if (typeof timeString !== \"string\")\n      return false;\n\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but\n    //we can catch that when parsing\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;\n    return regEx.test(timeString);\n  },\n  /**\n   * @method  Utility.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function dateToDateString(date) {\n    var m = (date.getMonth() + 1);\n    if (m < 10) {\n      m = \"0\" + m;\n    }\n    var d = date.getDate();\n    if (d < 10) {\n      d = \"0\" + d;\n    }\n    return date.getFullYear() + '-' + m + '-' + d;\n  },\n  /**\n   * @method  Utility.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function dateToDateStringUTC(date) {\n    var m = (date.getUTCMonth() + 1);\n    if (m < 10) {\n      m = \"0\" + m;\n    }\n    var d = date.getUTCDate();\n    if (d < 10) {\n      d = \"0\" + d;\n    }\n    return date.getUTCFullYear() + '-' + m + '-' + d;\n  },\n  /**\n   * @method  Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(date) {\n    return moment(date).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\");\n  },\n  /**\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {String} dateString\n   * @return {Boolean}\n   *\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"\n   */\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\")\n      return false;\n\n    var datePart = dateString.substring(0, 10);\n    var tPart = dateString.substring(10, 11);\n    var timePart = dateString.substring(11, dateString.length - 1);\n    var zPart = dateString.substring(dateString.length - 1);\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },\n  /**\n   * @method Utility.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date\n   * @param {String} offset A valid offset string (to pass to moment.zone)\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, offset) {\n    var m = moment(date);\n    m.zone(offset);\n    return m.format(\"YYYY-MM-DD[T]hh:mm:ss.SSS\");\n  },\n  /**\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString\n   * @private\n   * @param  {String} dtString\n   * @return {Boolean}\n   *\n   * Returns true if dtString is a \"valid normalized local date and time string\"\n   */\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {\n    if (typeof dtString !== \"string\")\n      return false;\n\n    var datePart = dtString.substring(0, 10);\n    var tPart = dtString.substring(10, 11);\n    var timePart = dtString.substring(11, dtString.length);\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);\n  },\n  /**\n   * @method Utility.normalizeContext\n   * @private\n   * @param  {Object} context A context object, potentially with an `atts` or `autoform` property.\n   * @param {String} name The name of the helper or component we're calling from, for in a potential error message.\n   * @return {Object} Normalized context object\n   *\n   * Returns an object with `afc`, `af`, and `atts` properties, normalized from whatever object is passed in.\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different\n   * helpers and components in different ways, but in all cases we want to get access to it and throw\n   * an error if we can't find an autoform context.\n   */\n  normalizeContext: function autoFormNormalizeContext(context, name) {\n    context = context || {};\n    var atts = context.atts || context;\n    var afContext = atts.autoform || context.autoform;\n    if (!afContext || !afContext._af) {\n      throw new Error(name + \" must be used within an autoForm block\");\n    }\n\n    var defs = Utility.getDefs(afContext._af.ss, atts.name); //defs will not be undefined\n\n    // For array fields, `allowedValues` is on the array item definition\n    if (defs.type === Array) {\n      var itemDefs = Utility.getDefs(afContext._af.ss, atts.name + \".$\");\n      var allowedValues = itemDefs.allowedValues;\n    } else {\n      var allowedValues = defs.allowedValues;\n    }\n\n    var defaultAttributes = defs.autoform || {};\n\n    // This is where we add default attributes specified in\n    // defs.autoform. We don't add them for afFieldLabel.\n    if (name === \"afFieldLabel\") {\n      if (_.has(atts, \"options\")) {\n        delete atts.options;\n      }\n    } else {\n      // If options=\"auto\", we want to use defs.autoform.options\n      // if specified and otherwise fall back to \"allowed\"\n      if (defaultAttributes.options && atts.options === \"auto\")\n        delete atts.options;\n      // \"autoform\" option in the schema provides default atts\n      atts = _.extend({}, defaultAttributes, atts);\n      // If still set to \"auto\", then there were no options in defs, so we use \"allowed\"\n      if (atts.options === \"auto\") {\n        if (allowedValues) {\n          atts.options = \"allowed\";\n        } else {\n          delete atts.options;\n        }\n      }\n    }\n\n    return {\n      afc: afContext,\n      af: afContext._af,\n      atts: atts,\n      defs: defs\n    };\n  },\n  /**\n   * @method Utility.stringToArray\n   * @private\n   * @param {String|Array} A variable that might be a string or an array.\n   * @return {Array} The array, building it from a comma-delimited string if necessary.\n   */\n  stringToArray: function stringToArray(s, errorMessage) {\n    if (typeof s === \"string\") {\n      return s.replace(/ /g, '').split(',');\n    } else if (!_.isArray(s)) {\n      throw new Error(errorMessage);\n    } else {\n      return s;\n    }\n  }\n};\n","/**\n * @constructor\n * @private\n * @param {String} migrationName\n *\n * Internal helper object to preserve form inputs across Hot Code Push\n * and across \"pages\" navigation if the option is enabled.\n */\nFormPreserve = function formPreserveConstructor(migrationName) {\n  var self = this;\n  if (! _.isString(migrationName))\n    throw Error(\"You must define an unique migration name of type String\");\n  self.registeredForms = {};\n  self.retrievedDocuments = {};\n  if (Package.reload) {\n    var Reload = Package.reload.Reload;\n    self.retrievedDocuments = Reload._migrationData(migrationName) || {};\n    Reload._onMigrate(migrationName, function () {\n      return [true, self._retrieveRegisteredDocuments()];\n    });\n  }\n};\n\nFormPreserve.prototype.getDocument = function (formId) {\n  var self = this;\n  if (! _.has(self.retrievedDocuments, formId))\n    return false;\n  else\n    return self.retrievedDocuments[formId];\n};\n\nFormPreserve.prototype.saveDocument = function (formId) {\n  this.retrievedDocuments[formId] = this.registeredForms[formId]();\n}\n\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {\n  this.registeredForms[formId] = retrieveFunc;\n};\n\nFormPreserve.prototype.unregisterForm = function (formId) {\n  delete this.registeredForms[formId];\n};\n\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {\n  res = {};\n  _.each(this.registeredForms, function (retrieveFunc, formId) {\n    res[formId] = retrieveFunc();\n  });\n  return res;\n};\n","Hooks = {\n  form: {},\n  global: {\n    before: {},\n    after: {},\n    formToDoc: [],\n    docToForm: [],\n    onSubmit: [],\n    onSuccess: [],\n    onError: [],\n    beginSubmit: [],\n    endSubmit: []\n  }\n};\n\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {\n  // Add before hooks\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);\n    }\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];\n    hooksList.before[type].push(func);\n  });\n\n  // Add after hooks\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);\n    }\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];\n    hooksList.after[type].push(func);\n  });\n\n  // Add all other hooks\n  _.each(['formToDoc', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'], function autoFormHooksEach(name) {\n    if (hooks[name]) {\n      if (typeof hooks[name] !== \"function\") {\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);\n      }\n\n      if(replace) {\n          hooksList[name] = [];\n      }\n\n      hooksList[name].push(hooks[name]);\n    }\n  });\n};\n\nHooks.getHooks = function getHooks(formId, type, subtype) {\n  var f, g;\n  if (subtype) {\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n  } else {\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n    g = Hooks.global[type] || [];\n  }\n  return f.concat(g);\n};\n","AutoForm = AutoForm || {};\n\n// Default Handlers\ndefaultInputValueHandlers = {\n\t'select.autoform-boolean': function () {\n\t\tvar val = this.val();\n\t\tif (val === \"true\") {\n\t\t\treturn true;\n\t\t} else if (val === \"false\") {\n\t\t\treturn false;\n\t\t} \n\t},\n\t'select[multiple]': function () {\n\t\treturn Utility.getSelectValues(this[0]);\n\t},\n\t'select': function () {\n\t\treturn this.val();\n\t},\n\t'input.autoform-boolean[type=checkbox]': function () {\n\t\t// boolean checkbox\n\t\treturn this.is(\":checked\");\n\t},\n\t'input.autoform-array-item[type=checkbox]': function () {\n\t\t// array checkbox\n\t\tif (this.is(\":checked\")) {\n\t\t\treturn this.val();\n\t\t}\n\t},\n\t'input.autoform-boolean[type=radio]': function () {\n\t\t//boolean radio\n\t\tvar val = this.val();\n\t\tif (this.is(\":checked\")) {\n\t\t\tif (val === \"true\") {\n\t        \treturn true;\n\t        } else if (val === \"false\") {\n\t         \treturn false;\n\t        }\n\t\t}\n\t},\n\t'input[type=radio]': function () {\n\t\tif (this.is(\":checked\")) {\n\t\t\treturn this.val();\n\t\t}\n\t},\n\t'[type=select]': function () {\n\t\treturn Utility.maybeNum(this.val());\n\t},\n\t'input[type=date]': function () {\n\t\tvar val = this.val();\n\t\tif (Utility.isValidDateString(val)) {\n\t\t\t//Date constructor will interpret val as UTC and create\n\t\t\t//date at mignight in the morning of val date in UTC time zone\n\t\t\treturn new Date(val);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t},\n\t'input[type=datetime]': function () {\n\t\tvar val = this.val();\n\t\tval = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;\n\t\tif (Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {\n\t\t\t//Date constructor will interpret val as UTC due to ending \"Z\"\n\t\t\treturn new Date(val);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t},\n\t'input[type=datetime-local]': function () {\n\t\tvar val = this.val();\n\t\tval = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;\n\t\tvar offset = this.attr(\"data-offset\") || \"Z\";\n\t\tif (Utility.isValidNormalizedLocalDateAndTimeString(val)) {\n\t\t\treturn new Date(val + offset);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t},\n\t'[contenteditable]': function () {\n\t\treturn this.html();\n\t},\n\t'[data-null-value]': function () {\n\t\treturn null;\n\t},\n\t'[data-schema-key]': function () {\n\t\t// fallback\n\t\treturn this.val();\n\t}\n};\n\n// Custom Handlers\ncustomInputValueHandlers = {};\n\nAutoForm.inputValueHandlers = function afInputValueHandlers(handlers) {\n  _.extend(customInputValueHandlers, handlers);\n};","FormData = function afFormData() {\n\tvar self = this;\n\tself.forms = {};\n};\n\nFormData.prototype.initForm = function fdInitForm(formId) {\n\tvar self = this;\n\n\tif (self.forms[formId])\n\t\treturn;\n\n\tself.forms[formId] = {\n\t\tsourceDoc: null,\n\t\tdeps: {\n\t\t\tsourceDoc: new Deps.Dependency\n\t\t}\n\t};\n};\n\nFormData.prototype.sourceDoc = function fdSourceDoc(formId, sourceDoc) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (sourceDoc) {\n\t\t//setter\n\t\tself.forms[formId].sourceDoc = sourceDoc;\n\t\tself.forms[formId].deps.sourceDoc.changed();\n\t} else {\n\t\t//getter\n\t\tself.forms[formId].deps.sourceDoc.depend();\n\t\treturn self.forms[formId].sourceDoc;\n\t}\n};\n\nFormData.prototype.getDocCountForField = function fdGetDocCountForField(formId, field) {\n\tvar self = this;\n\tvar mDoc = self.sourceDoc(formId);\n\tvar docCount;\n\tif (mDoc) {\n\t\tvar keyInfo = mDoc.getInfoForKey(field);\n\t\tif (keyInfo && _.isArray(keyInfo.value)) {\n\t\t\tdocCount = keyInfo.value.length\n\t\t}\n\t}\n\treturn docCount;\n};","ArrayTracker = function afArrayTracker() {\n  var self = this;\n  self.info = {};\n};\n\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n  var defs = Utility.getDefs(ss, field);\n\n  // minCount is set by the schema, but can be set higher on the field attribute\n  overrideMinCount = overrideMinCount || 0;\n  var minCount = defs.minCount || 0;\n  minCount = Math.max(overrideMinCount, minCount);\n\n  // maxCount is set by the schema, but can be set lower on the field attribute\n  overrideMaxCount = overrideMaxCount || Infinity;\n  var maxCount = defs.maxCount || Infinity;\n  maxCount = Math.min(overrideMaxCount, maxCount);\n\n  return {minCount: minCount, maxCount: maxCount};\n};\n\nArrayTracker.prototype.initForm = function atInitForm(formId) {\n\tvar self = this;\n\n\tif (self.info[formId])\n\t\treturn;\n\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.getForm = function atInitForm(formId) {\n\tvar self = this;\n\tself.initForm(formId);\n\treturn self.info[formId];\n};\n\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.resetField(formId, field);\n\t}\n};\n\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\n\tif (self.info[formId][field].array != null)\n\t\treturn;\n\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n\tvar arrayCount = Math.max(range.minCount, docCount || 1);\n\n\t// If this is an array of objects, collect names of object props\n\tvar childKeys = [];\n\tif (ss.schema(field + '.$').type === Object) {\n\t\tchildKeys = autoFormChildKeys(ss, field + '.$');\n\t}\n\n\tvar loopArray = [];\n\tfor (var i = 0; i < arrayCount; i++) {\n\t\tvar loopCtx = {arrayFieldName: field, name: field + '.' + i, index: i, minCount: overrideMinCount, maxCount: overrideMaxCount};\n\n\t\t// If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n\t\tif (childKeys.length) {\n\t\t  loopCtx.current = {};\n\t\t  _.each(childKeys, function (k) {\n\t\t    loopCtx.current[k] = field + '.' + i + '.' + k;\n\t\t  });\n\t\t}\n\n\t\tloopArray.push(loopCtx);\n\t};\n\n\tself.info[formId][field].array = loopArray;\n\tvar count = loopArray.length;\n\tself.info[formId][field].count = count;\n\tself.info[formId][field].visibleCount = count;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetField = function atResetField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.info[formId][field] = {\n\t\t\tdeps: new Deps.Dependency\n\t\t};\n\t}\n\n\tself.info[formId][field].array = null;\n\tself.info[formId][field].count = 0;\n\tself.info[formId][field].visibleCount = 0;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetForm = function atResetForm(formId) {\n\tvar self = this;\n\t_.each(self.info[formId], function (info, field) {\n\t\tself.resetField(formId, field);\n\t});\n};\n\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {\n\tvar self = this;\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn !!self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getField = function atGetField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].count;\n};\n\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].visibleCount;\n};\n\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n  if (currentCount < maxCount) {\n\t  var i = self.info[formId][field].array.length;\n\n\t  // If this is an array of objects, collect names of object props\n\t  var childKeys = [];\n\t  if (ss.schema(field + '.$').type === Object) {\n\t    childKeys = autoFormChildKeys(ss, field + '.$');\n\t  }\n\n\t  var loopCtx = {arrayFieldName: field, name: field + '.' + i, index: i, minCount: overrideMinCount, maxCount: overrideMaxCount};\n\n\t  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n\t  if (childKeys.length) {\n\t    loopCtx.current = {};\n\t    _.each(childKeys, function (k) {\n\t      loopCtx.current[k] = field + '.' + i + '.' + k;\n\t    });\n\t  }\n\n\t  self.info[formId][field].array.push(loopCtx);\n\t  self.info[formId][field].count++;\n\t  self.info[formId][field].visibleCount++;\n\t  self.info[formId][field].deps.changed();\n  }\n};\n\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n  if (currentCount > minCount) {\n    self.info[formId][field].array[index].removed = true;\n    self.info[formId][field].count--;\n    self.info[formId][field].visibleCount--;\n    self.info[formId][field].deps.changed();\n  }\n}\n\n// Returns schema keys that are direct children of the given schema key\n// XXX this could be a method on ss\nautoFormChildKeys = function autoFormChildKeys(ss, name) {\n  name = SimpleSchema._makeGeneric(name);\n  var prefix = name + \".\";\n\n  var childKeys = [];\n  _.each(ss._schemaKeys, function (key) {\n    // If it's a direct child, add it to the list\n    if (key.indexOf(prefix) === 0) {\n      var ending = key.slice(prefix.length);\n      if (ending.indexOf('.') === -1) {\n        childKeys.push(ending);\n      }\n    }\n  });\n  return childKeys;\n};","defaultFormId = \"_afGenericID\";\nformPreserve = new FormPreserve(\"autoforms\");\nformData = {}; //for looking up autoform data by form ID\nvar templatesById = {}; //keep a reference of autoForm templates by form `id` for AutoForm.getFormValues\nvar arrayFields = {}; //track # of array fields per form\nvar formValues = {}; //for reactive show/hide based on current value of a field\nvar fd = new FormData();\narrayTracker = new ArrayTracker();\n\nAutoForm = AutoForm || {}; //exported\n\n/**\n * @method AutoForm.addHooks\n * @public\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}\n *\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same\n * form.\n */\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {\n  if (typeof formIds === \"string\") {\n    formIds = [formIds];\n  }\n\n  // If formIds is null, add global hooks\n  if (!formIds) {\n    Hooks.addHooksToList(Hooks.global, hooks, replace);\n  } else {\n    _.each(formIds, function (formId) {\n\n      // Init the hooks object if not done yet\n      Hooks.form[formId] = Hooks.form[formId] || {\n        before: {},\n        after: {},\n        formToDoc: [],\n        docToForm: [],\n        onSubmit: [],\n        onSuccess: [],\n        onError: [],\n        beginSubmit: [],\n        endSubmit: []\n      };\n\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);\n    });\n  }\n};\n\n/**\n * @method AutoForm.hooks\n * @public\n * @param {Object} hooks\n * @returns {undefined}\n *\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same\n * form.\n */\nAutoForm.hooks = function autoFormHooks(hooks, replace) {\n  _.each(hooks, function(hooksObj, formId) {\n    AutoForm.addHooks(formId, hooksObj, replace);\n  });\n};\n\n/**\n * @method AutoForm.resetForm\n * @public\n * @param {String} formId\n * @returns {undefined}\n *\n * Resets validation for an autoform.\n */\nAutoForm.resetForm = function autoFormResetForm(formId) {\n  if (typeof formId !== \"string\") {\n    return;\n  }\n\n  formPreserve.unregisterForm(formId);\n\n  // Reset array counts\n  arrayTracker.resetForm(formId);\n\n  if (formData[formId]) {\n    formData[formId].ss && formData[formId].ss.namedContext(formId).resetValidation();\n    // If simpleSchema is undefined, we haven't yet rendered the form, and therefore\n    // there is no need to reset validation for it. No error need be thrown.\n  }\n};\n\nvar deps = {};\n\nvar defaultTemplate = \"bootstrap3\";\ndeps.defaultTemplate = new Deps.Dependency;\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {\n  defaultTemplate = template;\n  deps.defaultTemplate.changed();\n};\n\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {\n  deps.defaultTemplate.depend();\n  return defaultTemplate;\n};\n\n// All use global template by default\nvar defaultTypeTemplates = {\n  quickForm: null,\n  afFieldLabel: null,\n  afFieldSelect: null,\n  afCheckboxGroup: null,\n  afRadioGroup: null,\n  afSelect: null,\n  afTextarea: null,\n  afContenteditable: null,\n  afCheckbox: null,\n  afRadio: null,\n  afInput: null,\n  afDeleteButton: null,\n  afQuickField: null,\n  afObjectField: null,\n  afArrayField: null\n};\ndeps.defaultTypeTemplates = {\n  quickForm: new Deps.Dependency,\n  afFieldLabel: new Deps.Dependency,\n  afFieldSelect: new Deps.Dependency,\n  afCheckboxGroup: new Deps.Dependency,\n  afRadioGroup: new Deps.Dependency,\n  afSelect: new Deps.Dependency,\n  afTextarea: new Deps.Dependency,\n  afContenteditable: new Deps.Dependency,\n  afCheckbox: new Deps.Dependency,\n  afRadio: new Deps.Dependency,\n  afInput: new Deps.Dependency,\n  afDeleteButton: new Deps.Dependency,\n  afQuickField: new Deps.Dependency,\n  afObjectField: new Deps.Dependency,\n  afArrayField: new Deps.Dependency\n};\n\n/**\n * @method AutoForm.setDefaultTemplateForType\n * @public\n * @param {String} type\n * @param {String} template\n */\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {\n  if (!deps.defaultTypeTemplates[type]) {\n    throw new Error(\"invalid template type: \" + type);\n  }\n  if (template !== null && !Template[type + \"_\" + template]) {\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }\n  defaultTypeTemplates[type] = template;\n  deps.defaultTypeTemplates[type].changed();\n};\n\n/**\n * @method AutoForm.getDefaultTemplateForType\n * @public\n * @param {String} type\n * @return {String} Template name\n *\n * Reactive.\n */\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {\n  if (!deps.defaultTypeTemplates[type]) {\n    throw new Error(\"invalid template type: \" + type);\n  }\n  deps.defaultTypeTemplates[type].depend();\n  return defaultTypeTemplates[type];\n};\n\n/**\n * @method AutoForm.getFormValues\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.\n * @return {Object}\n *\n * Returns an object representing the current values of all schema-based fields in the form.\n * The returned object contains two properties, \"insertDoc\" and \"updateDoc\", which represent\n * the field values as a normal object and as a MongoDB modifier, respectively.\n */\nAutoForm.getFormValues = function autoFormGetFormValues(formId) {\n  var template = templatesById[formId];\n  if (!template || template._notInDOM) {\n    throw new Error(\"getFormValues: There is currently no autoForm template rendered for the form with id \" + formId);\n  }\n  // Get a reference to the SimpleSchema instance that should be used for\n  // determining what types we want back for each field.\n  var context = template.data;\n  var ss = Utility.getSimpleSchemaFromContext(context, formId);\n  return getFormValues(template, formId, ss);\n};\n\n/**\n * @method AutoForm.getFieldValue\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.\n * @param {String} fieldName The name of the field for which you want the current value.\n * @return {Any}\n *\n * Returns the value of the field (the value that would be used if the form were submitted right now).\n * This is a reactive method that will rerun whenever the current value of the requested field changes.\n */\nAutoForm.getFieldValue = function autoFormGetFieldValue(formId, fieldName) {\n  formValues[formId] = formValues[formId] || {};\n  formValues[formId][fieldName] = formValues[formId][fieldName] || {_deps: new Deps.Dependency};\n  formValues[formId][fieldName]._deps.depend();\n  return formValues[formId][fieldName]._val;\n};\n\n/**\n * @method AutoForm.validateField\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?\n *\n * In addition to returning a boolean that indicates whether the field is currently valid,\n * this method causes the reactive validation messages to appear.\n */\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {\n  var template = templatesById[formId];\n  if (!template || template._notInDOM) {\n    throw new Error(\"validateField: There is currently no autoForm template rendered for the form with id \" + formId);\n  }\n\n  return _validateField(fieldName, template, skipEmpty, false);\n};\n\n/*\n * Shared\n */\n\nUI.registerHelper('_af_findAutoForm', function afFindAutoForm(name) {\n  var afContext, i = 1;\n\n  do {\n    afContext = arguments[i];\n    i++;\n  } while (afContext && !afContext._af);\n\n  if (!afContext)\n    throw new Error(name + \" must be used within an autoForm block\");\n\n  return afContext;\n});\n\nTemplate.afFieldInput.getTemplate =\nTemplate.afFieldLabel.getTemplate =\nTemplate.afFieldSelect.getTemplate =\nTemplate.afDeleteButton.getTemplate =\nTemplate.afQuickField.getTemplate =\nTemplate.afObjectField.getTemplate =\nTemplate.afArrayField.getTemplate =\nTemplate.quickForm.getTemplate =\nfunction afGenericGetTemplate(templateType, templateName, fieldName, autoform) {\n  var result;\n\n  // Template may be specified in schema.\n  // Skip for quickForm and afDeleteButton because they render a form\n  // and not a field.\n  if (fieldName && autoform) {\n    var defs = Utility.getDefs(autoform._af.ss, fieldName); //defs will not be undefined\n    templateName = templateName || (defs.autoform && defs.autoform.template);\n  }\n  \n  var defaultTemplate = AutoForm.getDefaultTemplateForType(templateType) || AutoForm.getDefaultTemplate();\n\n  // Determine template name\n  if (templateName) {\n    var result = Template[templateType + '_' + templateName];\n    if (!result) {\n      console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to default template, \"' + defaultTemplate + '\".');\n    }\n  }\n\n  if (!result) {\n    result = Template[templateType + '_' + defaultTemplate];\n    if (!result) {\n      throw new Error(templateType + ': \"' + defaultTemplate + '\" is not a valid template name');\n    }\n  }\n\n  // Return the template instance that we want to use\n  return result;\n};\n\n/*\n * autoForm\n */\n\nTemplate.autoForm.atts = function autoFormTplAtts() {\n  var context = _.clone(this);\n\n  // By default, we add the `novalidate=\"novalidate\"` attribute to our form,\n  // unless the user passes `validation=\"browser\"`.\n  if (context.validation !== \"browser\" && !context.novalidate) {\n    context.novalidate = \"novalidate\";\n  }\n  // After removing all of the props we know about, everything else should\n  // become a form attribute.\n  // XXX Would be better to use a whitelist of HTML attributes allowed on form elements\n  return _.omit(context, \"schema\", \"collection\", \"validation\", \"doc\", \"resetOnSuccess\", \"type\", \"template\");\n};\n\nTemplate.autoForm.innerContext = function autoFormTplInnerContext(outerContext) {\n  var context = this;\n  var formId = context.id || defaultFormId;\n  var collection = Utility.lookup(context.collection);\n  var ss = Utility.getSimpleSchemaFromContext(context, formId);\n\n  // Retain doc values after a \"hot code push\", if possible\n  var retrievedDoc = formPreserve.getDocument(formId);\n  if (retrievedDoc !== false) {\n    context.doc = retrievedDoc;\n  }\n\n  var mDoc;\n  if (context.doc && !_.isEmpty(context.doc)) {\n    // Clone doc\n    var copy = _.clone(context.doc);\n    // Pass doc through docToForm hooks\n    _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(func) {\n      copy = func(copy, ss, formId);\n    });\n    // Create a \"flat doc\" that can be used to easily get values for corresponding\n    // form fields.\n    mDoc = new MongoObject(copy);\n    fd.sourceDoc(formId, mDoc);\n  } else {\n    fd.sourceDoc(formId, null);\n  }\n\n  // Set up the context to be used for everything within the autoform.\n  var innerContext = {_af: {\n    formId: formId,\n    collection: collection,\n    ss: ss,\n    doc: context.doc,\n    mDoc: mDoc,\n    validationType: (typeof context.validation === \"undefined\" ? \"submitThenKeyup\" : context.validation),\n    submitType: context.type,\n    resetOnSuccess: context.resetOnSuccess\n  }};\n\n  // Cache context for lookup by formId\n  formData[formId] = innerContext._af;\n\n  // When we change the form, loading a different doc, reloading the current doc, etc.,\n  // we also want to reset the array counts for the form\n  arrayTracker.resetForm(formId);\n\n  // Preserve outer context, allowing access within autoForm block without needing ..\n  _.extend(innerContext, outerContext);\n  return innerContext;\n};\n\nTemplate.autoForm.created = function autoFormCreated() {\n  var self = this;\n  var formId = self.data.id || defaultFormId;\n  // Add to templatesById list\n  templatesById[formId] = self;\n};\n\nTemplate.autoForm.destroyed = function autoFormDestroyed() {\n  var self = this;\n  self._notInDOM = true;\n  var formId = self.data.id || defaultFormId;\n\n  // Remove from templatesById list\n  if (templatesById[formId]) {\n    delete templatesById[formId];\n  }\n\n  // Remove from data list\n  if (formData[formId]) {\n    delete formData[formId];\n  }\n\n  // Remove from array fields list\n  arrayTracker.untrackForm(formId);\n\n  // Remove from field values\n  if (formValues[formId]) {\n    delete formValues[formId];\n  }\n\n  // Unregister form preservation\n  formPreserve.unregisterForm(formId);\n};\n\n/*\n * quickForm\n */\n\nUI.registerHelper('quickForm', function quickFormHelper() {\n  throw new Error('Use the new syntax {{> quickForm}} rather than {{quickForm}}');\n});\n\nTemplate.quickForm.innerContext = function quickFormContext(atts) {\n  // Pass along quickForm context to autoForm context, minus a few\n  // properties that are specific to quickForms.\n  var qfAutoFormContext = _.omit(atts, \"buttonContent\", \"buttonClasses\", \"fields\", \"omitFields\");\n\n  return {\n    qfAutoFormContext: qfAutoFormContext,\n    atts: atts\n  };\n};\n\n/*\n * afFieldLabel\n */\n\nUI.registerHelper('afFieldLabel', function afFieldLabelHelper() {\n  throw new Error('Use the new syntax {{> afFieldLabel name=\"name\"}} rather than {{afFieldLabel \"name\"}}');\n});\n\n/*\n * afFieldInput\n */\n\nUI.registerHelper('afFieldInput', function afFieldInputHelper() {\n  throw new Error('Use the new syntax {{> afFieldInput name=\"name\"}} rather than {{afFieldInput \"name\"}}');\n});\n\nTemplate.afFieldInput.getTemplateType = function getTemplateType() {\n  return getInputTemplateType(this.type);\n};\n\nTemplate.afFieldSelect.innerContext =\nTemplate.afFieldInput.innerContext = function afFieldInputInnerContext(options) {\n  var c = Utility.normalizeContext(options.hash, \"afFieldInput and afFieldSelect\");\n  var contentBlock = options.hash.contentBlock; // applies only to afFieldSelect\n\n  var ss = c.af.ss;\n  var defs = c.defs;\n\n  // Adjust for array fields if necessary\n  var expectsArray = false;\n  var defaultValue = defs.defaultValue; //make sure to use pre-adjustment defaultValue for arrays\n  if (defs.type === Array) {\n    defs = ss.schema(c.atts.name + \".$\");\n\n    //if the user overrides the type to anything,\n    //then we won't be using a select box and\n    //we won't be expecting an array for the current value\n    expectsArray = !c.atts.type;\n  }\n\n  // Get inputType\n  var inputType = getInputType(c.atts, defs, expectsArray);\n\n  // Get input value\n  var value = getInputValue(c.atts.name, c.atts, expectsArray, inputType, c.atts.value, c.af.mDoc, defaultValue);\n\n  // Track field's value for reactive show/hide of other fields by value\n  updateTrackedFieldValue(c.af.formId, c.atts.name, value);\n  \n  // Get input data context\n  var iData = getInputData(defs, c.atts, value, inputType, ss.label(c.atts.name), expectsArray, c.af.submitType, c.af);\n  \n  // Return input data context\n  return _.extend({_af: c.af, contentBlock: contentBlock, type: inputType}, iData);\n};\n\n/*\n * afFieldSelect\n */\n\nUI.registerHelper('afFieldSelect', function afFieldSelectHelper() {\n  throw new Error('Use the new syntax {{> afFieldSelect name=\"name\"}} rather than {{afFieldSelect \"name\"}}');\n});\n\n/*\n * afDeleteButton\n */\n\nUI.registerHelper('afDeleteButton', function afDeleteButtonHelper() {\n  throw new Error('Use the syntax {{> afDeleteButton collection=collection doc=doc}}');\n});\n\nTemplate.afDeleteButton.innerContext = function afDeleteButtonInnerContext(ctx, contentBlock) {\n  return _.extend(ctx, {contentBlock: contentBlock});\n};\n\n/*\n * afArrayField\n */\n\nUI.registerHelper('afArrayField', function afArrayFieldHelper() {\n  throw new Error('Use the syntax {{> afArrayField name=\"name\"}} rather than {{afArrayField \"name\"}}');\n});\n\nTemplate.afArrayField.innerContext = function (options) {\n  var c = Utility.normalizeContext(options.hash, \"afArrayField\");\n  var name = c.atts.name;\n  var fieldMinCount = c.atts.minCount || 0;\n  var fieldMaxCount = c.atts.maxCount || Infinity;\n  var ss = c.af.ss;\n  var formId = c.af.formId;\n\n  // Init the array tracking for this field\n  var docCount = fd.getDocCountForField(formId, name);\n  arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);\n\n  return {\n    atts: c.atts,\n    autoform: c.afc\n  };\n};\n\n/*\n * afObjectField\n */\n\nUI.registerHelper('afObjectField', function afObjectFieldHelper() {\n  throw new Error('Use the syntax {{> afObjectField name=\"name\"}} rather than {{afObjectField \"name\"}}');\n});\n\n/*\n * afQuickField\n */\n\nUI.registerHelper('afQuickField', function afQuickFieldHelper() {\n  throw new Error('Use the new syntax {{> afQuickField name=\"name\"}} rather than {{afQuickField \"name\"}}');\n});\n\nfunction quickFieldLabelAtts(context, autoform) {\n  // Remove unwanted props from the hash\n  context = _.omit(context, 'label');\n\n  // Separate label options from input options; label items begin with \"label-\"\n  var labelContext = {\n    name: context.name,\n    template: context.template,\n    autoform: autoform\n  };\n  _.each(context, function autoFormLabelContextEach(val, key) {\n    if (key.indexOf(\"label-\") === 0) {\n      labelContext[key.substring(6)] = val;\n    }\n  });\n\n  return labelContext;\n}\n\nfunction quickFieldInputAtts(context, autoform) {\n  // Remove unwanted props from the hash\n  context = _.omit(context, 'label');\n\n  // Separate label options from input options; label items begin with \"label-\"\n  var inputContext = {autoform: autoform};\n  _.each(context, function autoFormInputContextEach(val, key) {\n    if (key.indexOf(\"label-\") !== 0) {\n      inputContext[key] = val;\n    }\n  });\n\n  return inputContext;\n}\n\nTemplate.afQuickField.innerContext = function afQuickFieldInnerContext(options) {\n  var c = Utility.normalizeContext(options.hash, \"afQuickField\");\n  var ss = c.af.ss;\n\n  var labelAtts = quickFieldLabelAtts(c.atts, c.afc);\n  var inputAtts = quickFieldInputAtts(c.atts, c.afc);\n\n  return {\n    skipLabel: (c.atts.label === false || (c.defs.type === Boolean && !(\"select\" in c.atts) && !(\"radio\" in c.atts))),\n    afFieldLabelAtts: labelAtts,\n    afFieldInputAtts: inputAtts,\n    atts: {name: inputAtts.name, autoform: inputAtts.autoform}\n  };\n};\n\nTemplate.afQuickField.isGroup = function afQuickFieldIsGroup(options) {\n  var c = Utility.normalizeContext(options.hash, \"afQuickField\");\n  // Render a group of fields if we expect an Object\n  return (c.defs.type === Object);\n};\n\nTemplate.afQuickField.isFieldArray = function afQuickFieldIsFieldArray(options) {\n  var c = Utility.normalizeContext(options.hash, \"afQuickField\");\n\n  // Render an array of fields if we expect an Array and we don't have options\n  return (c.defs.type === Array && !c.atts.options);\n};\n\n/*\n * afEachArrayItem\n */\n\nTemplate.afEachArrayItem.innerContext = function afEachArrayItemInnerContext(options) {\n  var c = Utility.normalizeContext(options.hash, \"afEachArrayItem\");\n  var formId = c.af.formId;\n  var name = c.atts.name;\n  var docCount = fd.getDocCountForField(formId, name);\n\n  arrayTracker.initField(formId, name, c.af.ss, docCount, c.atts.minCount, c.atts.maxCount);\n  \n  return arrayTracker.getField(formId, name);\n};\n\n/*\n * Private Helper Functions\n */\n\nfunction getFieldsValues(fields) {\n  var doc = {};\n  fields.each(function formValuesEach() {\n    var field = $(this);\n    var fieldName = field.attr(\"data-schema-key\");\n\n    // use custom handlers first, and then use built-in handlers\n    _.every([customInputValueHandlers, defaultInputValueHandlers], function (handlerList) {\n      return _.every(handlerList, function (handler, selector) {\n        if (field.filter(selector).length === 1) {\n          // Special handling for checkboxes that create arrays\n          // XXX maybe there is a way to do this better\n          var isArrayCheckBox = (field.hasClass(\"autoform-array-item\"));\n          if (isArrayCheckBox) {\n            // Add empty array no matter what,\n            // to ensure that unchecking all boxes\n            // will empty the array.\n            if (!_.isArray(doc[fieldName])) {\n              doc[fieldName] = [];\n            }\n          }\n          var val = handler.call(field);\n          if (val !== void 0) {\n            if (isArrayCheckBox) {\n              doc[fieldName].push(val);\n            } else {\n              doc[fieldName] = val;\n            }\n          }\n          return false;\n        }\n        return true;\n      });\n    });\n  });\n\n  return doc;\n}\n\ngetFieldValue = function getFieldValue(template, key) {\n  var doc = getFieldsValues(template.$('[data-schema-key=\"' + key + '\"], [data-schema-key^=\"' + key + '.\"]'));\n  return doc && doc[key];\n};\n\ngetFormValues = function getFormValues(template, formId, ss) {\n  var doc = getFieldsValues(template.$(\"[data-schema-key]\").not(\"[disabled]\"));\n\n  // Expand the object\n  doc = Utility.expandObj(doc);\n\n  // As array items are removed, gaps can appear in the numbering,\n  // which results in arrays that have undefined items. Here we\n  // remove any array items that are undefined.\n  Utility.compactArrays(doc);\n\n  // Pass expanded doc through formToDoc hooks\n  var transforms = Hooks.getHooks(formId, 'formToDoc');\n  _.each(transforms, function formValuesTransform(transform) {\n    doc = transform(doc, ss, formId);\n  });\n\n  // We return doc, insertDoc, and updateDoc.\n  // For insertDoc, delete any properties that are null, undefined, or empty strings.\n  // For updateDoc, convert to modifier object with $set and $unset.\n  // Do not add auto values to either.\n  var result = {\n    insertDoc: ss.clean(Utility.cleanNulls(doc), {\n      isModifier: false,\n      getAutoValues: false\n    }),\n    updateDoc: ss.clean(Utility.docToModifier(doc), {\n      isModifier: true,\n      getAutoValues: false\n    })\n  };\n  return result;\n};\n\n/*\n * Gets the value that should be shown/selected in the input. Returns\n * a string or an array of strings. The value used,\n * in order of preference, is one of:\n * * The `value` attribute provided\n * * The value that is set in the `doc` provided on the containing autoForm\n * * The `defaultValue` from the schema\n */\nfunction getInputValue(name, atts, expectsArray, inputType, value, mDoc, defaultValue) {\n  if (typeof value === \"undefined\") {\n    // Get the value for this key in the current document\n    if (mDoc) {\n      var valueInfo = mDoc.getInfoForKey(name);\n      if (valueInfo) {\n        value = valueInfo.value;\n      }\n    }\n\n    // Only if there is no current document, use the schema defaultValue\n    else if (defaultValue !== null && defaultValue !== undefined) {\n      value = defaultValue;\n    }\n  }\n\n  // Change null or undefined to an empty string\n  value = (value == null) ? '' : value;\n\n  function stringValue(val) {\n    if (val instanceof Date) {\n      //convert Dates to string value based on field inputType\n      if (value instanceof Date) {\n        if (inputType === \"datetime\") {\n          return Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);\n        } else if (inputType === \"datetime-local\") {\n          var offset = atts.offset || \"Z\";\n          // TODO switch to use timezoneId attribute instead of offset\n          return Utility.dateToNormalizedLocalDateAndTimeString(val, offset);\n        } else {\n          // This fallback will be used for type=\"date\" as well\n          // as for select arrays, since it would not make much\n          // sense to do anything other than the date portion\n          // in select controls.\n          return Utility.dateToDateStringUTC(val);\n        }\n      }\n    } else if (val.toString) {\n      return val.toString();\n    } else {\n      return val;\n    }\n  }\n\n  // If we're expecting value to be an array, and it's not, make it one\n  if (expectsArray && !_.isArray(value)) {\n    if (typeof value === \"string\") {\n      value = value.split(',');\n    } else {\n      value = [value];\n    }\n  }\n\n  // Convert to strings\n  if (_.isArray(value)) {\n    value = _.map(value, function (v) {\n      return stringValue(v);\n    });\n  } else {\n    value = stringValue(value);\n  }\n\n  // We return either a string or an array of strings\n  return value;\n}\n\nfunction getInputData(defs, hash, value, inputType, label, expectsArray, submitType, _af) {\n  var schemaType = defs.type;\n\n  // We don't want to alter the original hash, so we clone it and\n  // remove some stuff that should not be HTML attributes\n  // XXX It would be better to use a whitelist of allowed attributes\n  var inputAtts = _.omit(hash,\n          \"autoform\",\n          \"value\",\n          \"firstOption\",\n          \"radio\",\n          \"select\",\n          \"noselect\",\n          \"trueLabel\",\n          \"falseLabel\",\n          \"options\",\n          \"offset\",\n          \"timezoneId\",\n          \"template\");\n\n  // Add required to every type of element, if required\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {\n    inputAtts.required = \"\";\n  }\n\n  // Add disabled or readonly if the form has that submit type\n  if (submitType === \"disabled\") {\n    inputAtts.disabled = \"\";\n  } else if (submitType === \"readonly\") {\n    inputAtts.readonly = \"\";\n  }\n\n  var min = (typeof defs.min === \"function\") ? defs.min() : defs.min;\n  var max = (typeof defs.max === \"function\") ? defs.max() : defs.max;\n\n  if (inputType === \"datetime-local\") {\n    // `offset` is deprecated and replaced by `timezoneId`\n    inputAtts[\"data-offset\"] = hash.offset || \"Z\";\n    inputAtts[\"data-timezoneId\"] = hash.timezoneId || \"UTC\";\n  }\n\n  // Extract settings from hash\n  var firstOption = hash.firstOption;\n  var radio = hash.radio;\n  var select = hash.select;\n  var noselect = hash.noselect;\n  var trueLabel = hash.trueLabel || \"True\";\n  var falseLabel = hash.falseLabel || \"False\";\n  var selectOptions = hash.options;\n\n  // Handle options=\"allowed\"\n  if (selectOptions === \"allowed\") {\n    selectOptions = _.map(defs.allowedValues, function(v) {\n      var label = v;\n      if (hash.capitalize && v.length > 0 && schemaType === String) {\n        label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();\n      }\n\n      return {label: label, value: v};\n    });\n  }\n  // If options are specified in the schema, they may be a function\n  // that has not yet been evaluated.\n  else if (typeof selectOptions === \"function\") {\n    selectOptions = selectOptions();\n  }\n\n  // Set placeholder to label from schema if requested\n  if (hash.placeholder === \"schemaLabel\") {\n    inputAtts.placeholder = label;\n  }\n\n  // To enable reactively toggling boolean attributes\n  // in a simple way, we add the attributes to the HTML\n  // only if their value is `true`. That is, unlike in\n  // HTML, their mere presence does not matter.\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {\n    if (!_.has(hash, booleanProp))\n      return;\n\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.\n    // But an empty string value results in the cleanest rendered output for boolean props,\n    // so we standardize as that.\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {\n      inputAtts[booleanProp] = \"\";\n    } else {\n      // If the value is anything else, we don't render it\n      delete inputAtts[booleanProp];\n    }\n  });\n\n  // Add data-schema-key to every type of element\n  inputAtts['data-schema-key'] = inputAtts['name'];\n\n  // Determine what options to use\n  var data = {};\n\n  data.name = inputAtts['name'];\n  data.expectsArray = expectsArray;\n\n  if (selectOptions) {\n    // Build anything that should be a select, which is anything with options\n    data.items = [];\n    // For check boxes, we add the \"autoform-array-item\" class\n    if (noselect && expectsArray) {\n      inputAtts[\"class\"] = (inputAtts[\"class\"] || \"\") + \" autoform-array-item\";\n    }\n    // If rendering a select element\n    if (!noselect) {\n      inputAtts.autocomplete = \"off\"; //can fix issues with some browsers selecting the firstOption instead of the selected option\n      if (expectsArray) {\n        inputAtts.multiple = \"\";\n      }\n      // If a firstOption was provided, add that to the items list first\n      if (firstOption && !expectsArray) {\n        data.items.push({\n          name: data.name,\n          label: firstOption,\n          value: \"\",\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          _id: \"\",\n          selected: false,\n          atts: inputAtts\n        });\n      }\n    }\n    // Add all defined options\n    _.each(selectOptions, function(opt) {\n      var selected = expectsArray ? _.contains(value, opt.value.toString()) : (opt.value.toString() === value.toString());\n      data.items.push({\n        name: data.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: selected,\n        atts: inputAtts\n      });\n    });\n  } else if (inputType === \"textarea\") {\n    if (typeof inputAtts.maxlength === \"undefined\" && typeof max === \"number\") {\n      inputAtts.maxlength = max;\n    }\n    data.value = value;\n  } else if (inputType === \"contenteditable\") {\n    if (typeof inputAtts['data-maxlength'] === \"undefined\" && typeof max === \"number\") {\n      inputAtts['data-maxlength'] = max;\n    }\n    data.value = value;\n  } else if (inputType === \"boolean-radios\" || inputType === \"boolean-select\" || inputType === \"boolean-checkbox\") {\n    value = (value === \"true\") ? true : false;\n\n    // add autoform-boolean class, which we use when building object\n    // from form values later\n    inputAtts[\"class\"] = (inputAtts[\"class\"] || \"\") + \" autoform-boolean\";\n\n    function getItems() {\n      return [\n        {\n          name: data.name,\n          value: \"false\",\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          _id: \"false\",\n          selected: !value,\n          label: falseLabel,\n          atts: inputAtts\n        },\n        {\n          name: data.name,\n          value: \"true\",\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          _id: \"true\",\n          selected: value,\n          label: trueLabel,\n          atts: inputAtts\n        }\n      ];\n    }\n    \n    if (inputType === \"boolean-radios\" || inputType === \"boolean-select\") {\n      data.items = getItems();\n    } else {\n      //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n      delete inputAtts.required;\n      data.value = \"true\";\n      data.selected = value;\n    }\n  } else {\n    // All other inputTypes\n    switch (inputType) {\n      case \"number\":\n        if (typeof inputAtts.max === \"undefined\" && typeof max === \"number\") {\n          inputAtts.max = max;\n        }\n        if (typeof inputAtts.min === \"undefined\" && typeof min === \"number\") {\n          inputAtts.min = min;\n        }\n        if (typeof inputAtts.step === \"undefined\" && defs.decimal) {\n          inputAtts.step = '0.01';\n        }\n        break;\n      case \"date\":\n        if (typeof inputAtts.max === \"undefined\" && max instanceof Date) {\n          inputAtts.max = Utility.dateToDateStringUTC(max);\n        }\n        if (typeof inputAtts.min === \"undefined\" && min instanceof Date) {\n          inputAtts.min = Utility.dateToDateStringUTC(min);\n        }\n        break;\n      case \"datetime\":\n        if (typeof inputAtts.max === \"undefined\" && max instanceof Date) {\n          inputAtts.max = Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(max);\n        }\n        if (typeof inputAtts.min === \"undefined\" && min instanceof Date) {\n          inputAtts.min = Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(min);\n        }\n        break;\n      case \"datetime-local\":\n        if (typeof inputAtts.max === \"undefined\" && max instanceof Date) {\n          inputAtts.max = Utility.dateToNormalizedLocalDateAndTimeString(max, inputAtts[\"data-offset\"]);\n        }\n        if (typeof inputAtts.min === \"undefined\" && min instanceof Date) {\n          inputAtts.min = Utility.dateToNormalizedLocalDateAndTimeString(min, inputAtts[\"data-offset\"]);\n        }\n        break;\n    }\n\n    if (typeof inputAtts.maxlength === \"undefined\"\n            && typeof max === \"number\"\n            && _.contains([\"text\", \"email\", \"search\", \"password\", \"tel\", \"url\"], inputType)\n            ) {\n      inputAtts.maxlength = max;\n    }\n\n    data.type = inputType;\n    data.value = value;\n  }\n\n  // We set this one down here because some of the code paths above alter inputAtts\n  data.atts = inputAtts;\n\n  return data;\n}\n\nfunction getInputType(atts, defs, expectsArray) {\n  var schemaType = defs.type;\n  var max = (typeof defs.max === \"function\") ? defs.max() : defs.max;\n\n  var type = \"text\";\n  if (atts.type) {\n    type = atts.type;\n  } else if (atts.options) {\n    if (atts.noselect) {\n      if (expectsArray) {\n        type = \"select-checkbox\";\n      } else {\n        type = \"select-radio\";\n      }\n    } else {\n      type = \"select\";\n    }\n  } else if (schemaType === String && defs.regEx === SimpleSchema.RegEx.Email) {\n    type = \"email\";\n  } else if (schemaType === String && defs.regEx === SimpleSchema.RegEx.Url) {\n    type = \"url\";\n  } else if (schemaType === String && (atts.rows || max >= 150)) {\n    type = \"textarea\";\n  } else if (schemaType === Number) {\n    type = \"number\";\n  } else if (schemaType === Date) {\n    type = \"date\";\n  } else if (schemaType === Boolean) {\n    if (atts.radio) {\n      type = \"boolean-radios\";\n    } else if (atts.select) {\n      type = \"boolean-select\";\n    } else {\n      type = \"boolean-checkbox\";\n    }\n  }\n  return type;\n}\n\nfunction getInputTemplateType(type) {\n  // Special types\n  var typeMap = {\n    \"select\": \"afSelect\",\n    \"select-checkbox\": \"afCheckboxGroup\",\n    \"select-radio\": \"afRadioGroup\",\n    \"textarea\": \"afTextarea\",\n    \"contenteditable\": \"afContenteditable\",\n    \"boolean-radios\": \"afRadioGroup\",\n    \"boolean-select\": \"afSelect\",\n    \"boolean-checkbox\": \"afCheckbox\",\n  };\n\n  // All other input types\n  var defaultTemplateType = \"afInput\";\n  \n  return typeMap[type] || defaultTemplateType;\n}\n\nfunction _validateField(key, template, skipEmpty, onlyIfAlreadyInvalid) {\n  if (!template || template._notInDOM) {\n    return; //skip validation\n  }\n\n  var context = template.data;\n  var formId = context.id || defaultFormId;\n  var ss = Utility.getSimpleSchemaFromContext(context, formId);\n\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {\n    return; //skip validation\n  }\n\n  // Create a document based on all the values of all the inputs on the form\n  var form = getFormValues(template, formId, ss);\n\n  // Clean and validate doc\n  if (context.type === \"update\") {\n    var docToValidate = form.updateDoc;\n    var isModifier = true;\n  } else {\n    var docToValidate = form.insertDoc;\n    var isModifier = false;\n  }\n\n  // Skip validation if skipEmpty is true and the field we're validating\n  // has no value.\n  if (skipEmpty && !Utility.objAffectsKey(docToValidate, key))\n    return; //skip validation\n\n  var userId = (Meteor.userId && Meteor.userId()) || null;\n\n  // getFormValues did some cleaning but didn't add auto values; add them now\n  ss.clean(docToValidate, {\n    isModifier: isModifier,\n    filter: false,\n    autoConvert: false,\n    extendAutoValueContext: {\n      userId: userId,\n      isInsert: !isModifier,\n      isUpdate: isModifier,\n      isUpsert: false,\n      isFromTrustedCode: false\n    }\n  });\n  return ss.namedContext(formId).validateOne(docToValidate, key, {\n    modifier: isModifier,\n    extendedCustomContext: {\n      userId: userId,\n      isInsert: !isModifier,\n      isUpdate: isModifier,\n      isUpsert: false,\n      isFromTrustedCode: false\n    }\n  });\n}\n\n//throttling function that calls out to _validateField\nvar vok = {}, tm = {};\nvalidateField = function validateField(key, template, skipEmpty, onlyIfAlreadyInvalid) {\n  if (vok[key] === false) {\n    Meteor.clearTimeout(tm[key]);\n    tm[key] = Meteor.setTimeout(function() {\n      vok[key] = true;\n      _validateField(key, template, skipEmpty, onlyIfAlreadyInvalid);\n    }, 300);\n    return;\n  }\n  vok[key] = false;\n  _validateField(key, template, skipEmpty, onlyIfAlreadyInvalid);\n};\n\nupdateTrackedFieldValue = function updateTrackedFieldValue(formId, key, val) {\n  formValues[formId] = formValues[formId] || {};\n  formValues[formId][key] = formValues[formId][key] || {_deps: new Deps.Dependency};\n  formValues[formId][key]._val = val;\n  formValues[formId][key]._deps.changed();\n};","/*\n * afFieldMessage\n */\nUI.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {\n  //help users transition from positional name arg\n  if (typeof options === \"string\") {\n    throw new Error('Use the new syntax {{afFieldMessage name=\"name\"}} rather than {{afFieldMessage \"name\"}}');\n  }\n\n  options = parseOptions(options, this, 'afFieldMessage');\n\n  return options.ss.namedContext(options.formId).keyErrorMessage(options.name);\n});\n\n/*\n * afFieldIsInvalid\n */\nUI.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {\n  //help users transition from positional name arg\n  if (typeof options === \"string\") {\n    throw new Error('Use the new syntax {{#if afFieldIsInvalid name=\"name\"}} rather than {{#if afFieldIsInvalid \"name\"}}');\n  }\n\n  options = parseOptions(options, this, 'afFieldIsInvalid');\n\n  return options.ss.namedContext(options.formId).keyIsInvalid(options.name);\n});\n\n/*\n * afArrayFieldHasMoreThanMinimum\n */\nUI.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {\n  options = parseOptions(options, this, 'afArrayFieldHasMoreThanMinimum');\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);\n  return (visibleCount > range.minCount);\n});\n\n/*\n * afArrayFieldHasLessThanMaximum\n */\nUI.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {\n  options = parseOptions(options, this, 'afArrayFieldHasLessThanMaximum');\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);\n  return (visibleCount < range.maxCount);\n});\n\n/*\n * afFieldValueIs\n */\nUI.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {\n  options = parseOptions(options, this, 'afFieldValueIs');\n\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);\n  return currentValue === options.value;\n});\n\n/*\n * afFieldValueContains\n */\nUI.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {\n  options = parseOptions(options, this, 'afFieldValueContains');\n\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);\n  return _.isArray(currentValue) && _.contains(currentValue, options.value);\n});\n\n/*\n * afFieldLabelText\n */\nUI.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {\n  options = parseOptions(options, this, 'afFieldLabelText');\n\n  return options.ss.label(options.name);\n});\n\n/*\n * afFieldNames\n */\nUI.registerHelper(\"afFieldNames\", function autoFormFieldNames(options) {\n  options = parseOptions(options, this, 'afFieldNames');\n  var ss = options.ss;\n  var name = options.name;\n\n  // Get the list of fields we want included\n  var fieldList = options.fields;\n  if (fieldList) {\n    fieldList = Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  } else if (name) {\n    // If we weren't given a fieldList but were given a field name, use subfields by default\n    \n    // Get list of field names that are descendants of this field's name\n    fieldList = autoFormChildKeys(ss, name);\n\n    // Tack child field name on to end of parent field name. This\n    // ensures that we keep the desired array index for array items.\n    fieldList = _.map(fieldList, function (field) {\n      return name + \".\" + field;\n    });\n  } else {\n    // If we weren't given a fieldList or a field name, use all first level schema keys by default\n    fieldList = ss.firstLevelSchemaKeys() || [];\n  }\n\n  // If user wants to omit some fields, remove those from the array\n  var omitFields = options.omitFields;\n  if (omitFields) {\n    omitFields = Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);\n    // If omitFields contains generic field names (with $) we omit those too\n    fieldList = _.reject(fieldList, function (f) {\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));\n    });\n  }\n\n  // Filter out fields we never want\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {\n    var fieldDefs = ss.schema(field);\n\n    // Don't include fields with denyInsert=true when it's an insert form\n    if (fieldDefs.denyInsert && options.submitType === \"insert\")\n      return false;\n\n    // Don't include fields with denyUpdate=true when it's an update form\n    if (fieldDefs.denyUpdate && options.submitType === \"update\")\n      return false;\n\n    return true;\n  });\n\n  // Ensure fields are not added more than once\n  fieldList = _.unique(fieldList);\n\n  return fieldList;\n});\n\n/*\n * PRIVATE\n */\n\nfunction parseOptions(options, self, helperName) {\n  var hash = (options || {}).hash || {};\n  // Find the autoform context\n  var afContext = hash.autoform && hash.autoform._af || self && self._af || self && self.autoform && self.autoform._af;\n  var ss = afContext.ss;\n  if (!ss) {\n    throw new Error(helperName + \" helper must be used within an autoForm block\");\n  }\n\n  hash.name && Utility.getDefs(ss, hash.name); //for side effect of throwing errors when name is not in schema\n  return _.extend({}, afContext, hash);\n}","function doBefore(docId, doc, hooks, template, name) {\n  // We pass the template instance in case the hook\n  // needs the data context\n  _.each(hooks, function doBeforeHook(hook) {\n    if (hook) {\n      if (docId) {\n        doc = hook(docId, doc, template);\n      } else {\n        doc = hook(doc, template);\n      }\n      if (!_.isObject(doc)) {\n        throw new Error(name + \" must return an object\");\n      }\n    }\n  });\n  return doc;\n}\n\nfunction beginSubmit(formId, template) {\n  if (!template || template._notInDOM)\n    return;\n  // Get user-defined hooks\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');\n  if (hooks.length) {\n    _.each(hooks, function beginSubmitHooks(hook) {\n      hook(formId, template);\n    });\n  } else {\n    // If there are no user-defined hooks, by default we disable the submit button during submission\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n}\n\nfunction endSubmit(formId, template) {\n  if (!template || template._notInDOM)\n    return;\n  // Get user-defined hooks\n  var hooks = Hooks.getHooks(formId, 'endSubmit');\n  if (hooks.length) {\n    _.each(hooks, function endSubmitHooks(hook) {\n      hook(formId, template);\n    });\n  } else {\n    // If there are no user-defined hooks, by default we disable the submit button during submission\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  } \n}\n\nTemplate.autoForm.events({\n  'submit form': function autoFormSubmitHandler(event, template) {\n    //determine what we want to do\n    var context = this;\n    var isInsert = (context.type === \"insert\");\n    var isUpdate = (context.type === \"update\");\n    var isRemove = (context.type === \"remove\");\n    var isMethod = (context.type === \"method\");\n    var isNormalSubmit = (!isInsert && !isUpdate && !isRemove && !isMethod);\n    var method = context.meteormethod;\n\n    //init\n    var validationType = context.validation || \"submitThenKeyup\";\n    var formId = context.id || defaultFormId;\n    var collection = Utility.lookup(context.collection);\n    var schema = context.schema;\n    // ss will be the schema for the `schema` attribute if present,\n    // else the schema for the collection\n    var ss = Utility.getSimpleSchemaFromContext(context, formId);\n    var currentDoc = context.doc || null;\n    var docId = currentDoc ? currentDoc._id : null;\n    var resetOnSuccess = context.resetOnSuccess;\n\n    // Gather hooks\n    var beforeInsert = Hooks.getHooks(formId, 'before', 'insert');\n    var beforeUpdate = Hooks.getHooks(formId, 'before', 'update');\n    var beforeRemove = Hooks.getHooks(formId, 'before', 'remove');\n    var beforeMethod = method && Hooks.getHooks(formId, 'before', method);\n    var afterInsert = Hooks.getHooks(formId, 'after', 'insert');\n    var afterUpdate = Hooks.getHooks(formId, 'after', 'update');\n    var afterRemove = Hooks.getHooks(formId, 'after', 'remove');\n    var afterMethod = method && Hooks.getHooks(formId, 'after', method);\n    var onSuccess = Hooks.getHooks(formId, 'onSuccess');\n    var onError = Hooks.getHooks(formId, 'onError');\n    var onSubmit = Hooks.getHooks(formId, 'onSubmit');\n\n    // Prevent browser form submission if we're planning to do our own thing\n    if (!isNormalSubmit) {\n      event.preventDefault();\n    }\n\n    // Prep haltSubmission function\n    function haltSubmission() {\n      event.preventDefault();\n      event.stopPropagation();\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)\n      endSubmit(formId, template);\n    }\n\n    // Prep function to select the focus the first field with an error\n    function selectFirstInvalidField() {\n      var ctx = ss.namedContext(formId);\n      if (!ctx.isValid()) {\n        _.every(template.findAll('[data-schema-key]'), function selectFirstInvalidFieldEvery(input) {\n          if (ctx.keyIsInvalid(input.getAttribute('data-schema-key'))) {\n            input.focus();\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n    }\n\n    // Prep reset form function\n    function autoFormDoResetForm() {\n      if (!template._notInDOM) {\n        template.find(\"form\").reset();\n        var focusInput = template.find(\"[autofocus]\");\n        focusInput && focusInput.focus();\n      }\n    }\n\n    // Prep callback creator function\n    function makeCallback(name, afterHook) {\n      return function autoFormActionCallback(error, result) {\n        if (error) {\n          selectFirstInvalidField();\n          _.each(onError, function onErrorEach(hook) {\n            hook(name, error, template);\n          });\n        } else {\n          // By default, we reset form after successful submit, but\n          // you can opt out.\n          if (resetOnSuccess !== false) {\n            autoFormDoResetForm();\n          }\n          _.each(onSuccess, function onSuccessEach(hook) {\n            hook(name, result, template);\n          });\n        }\n        _.each(afterHook, function afterHookEach(hook) {\n          hook(error, result, template);\n        });\n        // Run endSubmit hooks (re-enabled submit button or form, etc.)\n        endSubmit(formId, template);\n      };\n    }\n\n    // If type is \"remove\", do that right away since we don't need to gather\n    // form values or validate.\n    if (isRemove) {\n      // Run beginSubmit hooks (disable submit button or form, etc.)\n      beginSubmit(formId, template);\n\n      // Call beforeRemove hooks if present, and stop if any return false\n      var shouldStop = _.any(beforeRemove, function eachBeforeRemove(hook) {\n        return (hook(docId, template) === false);\n      });\n      if (shouldStop) {\n        return haltSubmission();\n      }\n      if(!collection) {\n          throw new Error(\"AutoForm: You must specify a collection when form type is remove.\");\n      }\n      collection.remove(docId, makeCallback('remove', afterRemove));\n      return;\n    }\n\n    // Gather all form values\n    var form = getFormValues(template, formId, ss);\n\n    // Run beginSubmit hooks (disable submit button or form, etc.)\n    // NOTE: This needs to stay after getFormValues in case a\n    // beginSubmit hook disables inputs. We don't get values for\n    // disabled inputs, but if they are just disabling during submission,\n    // then we actually do want the values.\n    beginSubmit(formId, template);\n\n    // Execute some before hooks\n    var insertDoc = isInsert ? doBefore(null, form.insertDoc, beforeInsert, template, 'before.insert hook') : form.insertDoc;\n    var updateDoc = isUpdate && !_.isEmpty(form.updateDoc) ? doBefore(docId, form.updateDoc, beforeUpdate, template, 'before.update hook') : form.updateDoc;\n\n    // Get a version of the doc that has auto values to validate here. We\n    // don't want to actually send any auto values to the server because\n    // we ultimately want them generated on the server\n    var insertDocForValidation = ss.clean(_.clone(insertDoc), {\n      filter: false,\n      autoConvert: false,\n      extendAutoValueContext: {\n        userId: (Meteor.userId && Meteor.userId()) || null,\n        isInsert: true,\n        isUpdate: false,\n        isUpsert: false,\n        isFromTrustedCode: false\n      }\n    });\n\n    // Prep isValid function\n    var validationErrorTriggered = 0;\n    function isValid(doc, isModifier, type) {\n      var result = validationType === 'none' || ss.namedContext(formId).validate(doc, {\n        modifier: isModifier,\n        extendedCustomContext: {\n          userId: (Meteor.userId && Meteor.userId()) || null,\n          isInsert: !isModifier,\n          isUpdate: !!isModifier,\n          isUpsert: false,\n          isFromTrustedCode: false\n        }\n      });\n      if (!result && !validationErrorTriggered) {\n        selectFirstInvalidField();\n        _.each(onError, function onErrorEach(hook) {\n          hook(type, new Error('failed validation'), template);\n        });\n        validationErrorTriggered++;\n      }\n      return result;\n    }\n\n    // Perform validation for onSubmit call or for normal form submission\n    if (((onSubmit.length > 0) || isNormalSubmit) && !isValid(insertDocForValidation, false, 'pre-submit validation')) {\n      return haltSubmission();\n    }\n\n    // Call onSubmit\n    if (onSubmit.length > 0) {\n      var context = {\n        event: event,\n        template: template,\n        resetForm: autoFormDoResetForm\n      };\n      // Pass both types of doc to onSubmit\n      var shouldStop = _.any(onSubmit, function eachOnSubmit(hook) {\n        return (hook.call(context, insertDoc, updateDoc, currentDoc) === false);\n      });\n      if (shouldStop) {\n        return haltSubmission();\n      }\n    }\n\n    // Now we will do the requested insert, update, remove, method, or normal\n    // browser form submission. Even though we may have already validated above\n    // if we have an onSubmit hook, we do it again upon insert or update\n    // because collection2 validation catches additional stuff like unique and\n    // because our form schema need not be the same as our collection schema.\n    if (isInsert) {\n      if(!collection) {\n         throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");\n      }\n      // If there is an override schema supplied, validate against that first\n      if (schema && !isValid(insertDocForValidation, false, 'pre-submit validation')) {\n        return haltSubmission();\n      }\n      collection.insert(insertDoc, {validationContext: formId}, makeCallback('insert', afterInsert));\n    } else if (isUpdate) {\n      var updateCallback = makeCallback('update', afterUpdate);\n      if (_.isEmpty(updateDoc)) {\n        // Nothing to update. Just treat it as a successful update.\n        updateCallback(null, 0);\n      } else {\n        if(!collection) {\n          throw new Error(\"AutoForm: You must specify a collection when form type is update.\");\n        }\n        // If there is an override schema supplied, validate against that first\n        if (schema) {\n          // Get a version of the doc that has auto values to validate here. We\n          // don't want to actually send any auto values to the server because\n          // we ultimately want them generated on the server\n          var updateDocForValidation = ss.clean(_.clone(updateDoc), {\n            filter: false,\n            autoConvert: false,\n            extendAutoValueContext: {\n              userId: (Meteor.userId && Meteor.userId()) || null,\n              isInsert: false,\n              isUpdate: true,\n              isUpsert: false,\n              isFromTrustedCode: false\n            }\n          });\n          if (!isValid(updateDocForValidation, true, 'pre-submit validation')) {\n            return haltSubmission();\n          }\n        }\n        collection.update(docId, updateDoc, {validationContext: formId}, updateCallback);\n      }\n    }\n\n    // We won't do an else here so that a method could be called in\n    // addition to another action on the same submit\n    if (method) {\n      var methodDoc = doBefore(null, form.insertDoc, beforeMethod, template, 'before.method hook');\n      // Get a copy of the doc with auto values added to use for validation\n      var methodDocForValidation = ss.clean(_.clone(methodDoc), {\n        filter: false,\n        autoConvert: false,\n        extendAutoValueContext: {\n          userId: (Meteor.userId && Meteor.userId()) || null,\n          isInsert: true, //methodDoc should be treated like insertDoc\n          isUpdate: false,\n          isUpsert: false,\n          isFromTrustedCode: false\n        }\n      });\n      // Validate first\n      if (!isValid(methodDocForValidation, false, method)) {\n        return haltSubmission();\n      }\n      Meteor.call(method, methodDoc, form.updateDoc, docId, makeCallback(method, afterMethod));\n    }\n  },\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event, template) {\n    var validationType = template.data.validation || 'submitThenKeyup';\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup');\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, skipEmpty, onlyIfAlreadyInvalid);\n    }\n  },\n  'blur [data-schema-key]': function autoFormBlurHandler(event, template) {\n    var validationType = template.data.validation || 'submitThenKeyup';\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, false, onlyIfAlreadyInvalid);\n    }\n  },\n  'change form': function autoFormChangeHandler(event, template) {\n    var key = event.target.getAttribute(\"data-schema-key\");\n    if (!key)\n      return;\n\n    var formId = this.id;\n    var data = formData[formId];\n    if (data && data.ss) {\n      var ss = data.ss;\n      formPreserve.registerForm(formId, function autoFormRegFormCallback() {\n        return getFormValues(template, formId, ss).insertDoc;\n      });\n\n      // Get field's value for reactive show/hide of other fields by value\n      updateTrackedFieldValue(formId, key, getFieldValue(template, key));\n    }\n    var validationType = data.validationType || 'submitThenKeyup';\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(key, template, false, onlyIfAlreadyInvalid);\n    }\n  },\n  'reset form': function autoFormResetHandler(event, template) {\n    var context = this;\n    var formId = context.id || defaultFormId;\n    AutoForm.resetForm(formId);\n    if (context.doc) {\n      //reload form values from doc\n      event.preventDefault();\n      template['__component__'].render();\n    }\n  },\n  'keydown .autoform-array-item input': function (event, template) {\n    // When enter is pressed in an array item field, default behavior\n    // seems to be to \"click\" the remove item button. This doesn't make\n    // sense so we stop it.\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  },\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context\n\n    event.preventDefault();\n\n    var name = self.arrayFieldName;\n    var minCount = self.minCount; // optional, overrides schema\n    var maxCount = self.maxCount; // optional, overrides schema\n    var index = self.index;\n    var data = template.data;\n    var formId = data && data.id || defaultFormId;\n    var ss = formData[formId].ss;\n\n    // remove the item we clicked\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);\n  },\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {\n    event.preventDefault();\n\n    // We pull from data attributes because the button could be manually\n    // added anywhere, so we don't know the data context.\n    var btn = $(event.currentTarget);\n    var name = btn.attr(\"data-autoform-field\");\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema\n    var data = template.data;\n    var formId = data && data.id || defaultFormId;\n    var ss = formData[formId].ss;\n\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);\n  }\n});"]}