)]}'
{"version":3,"file":"/packages/notifications.js","sources":["notifications/notifications.html","notifications/notification.html","notifications/notifications.js","notifications/notification.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kD;AACA,kB;AACA,sB;AACA,kB;AACA,4B;AACA,sC;AACA,wD;AACA,0B;AACA,oB;AACA,oG;AACA,c;AACA,I;;;;;;;;;;;;;;;;;;;;ACXA,iD;AACA,kB;AACA,sB;AACA,kB;AACA,4C;AACA,uF;AACA,8B;AACA,0D;AACA,4B;AACA,sB;AACA,yB;AACA,S;AACA,8B;AACA,oB;AACA,iB;AACA,oD;AACA,+B;AACA,sB;AACA,iB;AACA,sD;AACA,uC;AACA,wD;AACA,0B;AACA,oB;AACA,8C;AACA,4B;AACA,qB;AACA,sB;AACA,c;AACA,yB;AACA,kB;AACA,I;;;;;;;;;;;;;;;;;;;AChCA,+B;AACA,Q;AACA,2C;AACA,mB;AACA,O;AACA,8B;AACA,oE;AACA,8C;AACA,K;;AAEA,Q;AACA,0B;AACA,gD;AACA,kD;AACA,0E;AACA,O;AACA,kF;AACA,gC;AACA,iD;;AAEA,8B;AACA,mC;AACA,uC;AACA,yC;AACA,2D;AACA,6D;AACA,+E;AACA,8B;AACA,0E;AACA,S;;AAEA,gC;AACA,M;;AAEA,Q;AACA,gD;AACA,gD;AACA,kD;AACA,0E;AACA,mB;AACA,O;AACA,wE;AACA,gC;AACA,wC;AACA,6D;AACA,M;;AAEA,Q;AACA,kD;AACA,gD;AACA,kD;AACA,0E;AACA,mB;AACA,O;AACA,uE;AACA,gC;AACA,0C;AACA,6D;AACA,M;;AAEA,Q;AACA,+C;AACA,gD;AACA,kD;AACA,0E;AACA,mB;AACA,O;AACA,uE;AACA,gC;AACA,uC;AACA,6D;AACA,M;;AAEA,Q;AACA,kD;AACA,gD;AACA,kD;AACA,0E;AACA,mB;AACA,O;AACA,0E;AACA,gC;AACA,0C;AACA,6D;AACA,M;;AAEA,Q;AACA,4D;AACA,gD;AACA,e;AACA,O;AACA,uE;AACA,6C;AACA,M;;AAEA,Q;AACA,iF;AACA,iF;AACA,e;AACA,O;AACA,4D;AACA,yE;AACA,+D;;AAEA,qD;;AAEA,mC;AACA,4C;AACA,6D;AACA,mE;AACA,0D;AACA,iB;AACA,a;;AAEA,6C;AACA,sC;AACA,a;AACA,S;AACA,M;;AAEA,Q;AACA,yG;AACA,kD;AACA,e;AACA,O;AACA,qE;AACA,yE;;AAEA,kH;AACA,sF;;AAEA,qC;AACA,M;;AAEA,Q;AACA,8D;AACA,e;AACA,O;AACA,0D;AACA,wB;AACA,+D;;AAEA,8B;AACA,uE;AACA,gE;AACA,sC;AACA,uD;AACA,gB;AACA,kD;AACA,S;AACA,M;;AAEA,Q;AACA,+D;AACA,uC;AACA,8D;AACA,O;AACA,gF;AACA,8B;;AAEA,mD;AACA,4C;AACA,sD;AACA,a;AACA,W;;AAEA,iC;AACA,M;;AAEA,Q;AACA,sD;AACA,sB;AACA,O;AACA,0D;AACA,4D;;AAEA,wC;AACA,2D;AACA,kD;AACA,kC;AACA,S;AACA,M;;AAEA,Q;AACA,4D;AACA,8E;AACA,O;AACA,qC;AACA,mB;AACA,qB;AACA,kB;AACA,oB;AACA,M;;AAEA,Q;AACA,4D;AACA,sE;AACA,O;AACA,8C;AACA,iD;AACA,4B;AACA,mB;AACA,4B;AACA,kC;AACA,sB;AACA,uB;AACA,0B;AACA,6B;AACA,wB;AACA,S;AACA,M;;AAEA,yB;AACA,K;;AAEA,kC;;AAEA,mD;AACA,8D;AACA,E;;AAEA,+C;AACA,+B;AACA,8C;AACA,+C;;AAEA,mB;AACA,mC;AACA,mC;AACA,wD;AACA,0B;AACA,mC;AACA,kD;AACA,mB;AACA,U;AACA,wC;AACA,+C;;AAEA,iH;AACA,iC;AACA,gB;AACA,S;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACnPA,a;;AAEA,sE;AACA,gE;AACA,E;;AAEA,gC;AACA,0B;AACA,iC;AACA,2C;AACA,S;AACA,K;AACA,E","sourcesContent":["\nTemplate.__define__(\"notifications\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.UL({\n    \"class\": \"notifications\"\n  }, \"\\n       \", UI.Each(function() {\n    return Spacebars.call(self.lookup(\"notifications\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n           \", Spacebars.include(self.lookupTemplate(\"notification\")), \"\\n       \" ];\n  })), \"\\n\t\");\n}));\n","\nTemplate.__define__(\"notification\", (function() {\n  var self = this;\n  var template = this;\n  return HTML.LI({\n    \"class\": [ \"notification \", function() {\n      return Spacebars.mustache(self.lookup(\"notificationColor\"), self.lookup(\"type\"));\n    }, \" \", UI.If(function() {\n      return Spacebars.call(self.lookup(\"userCloseable\"));\n    }, UI.block(function() {\n      var self = this;\n      return \"closeable\";\n    })) ]\n  }, \"\\n         \", HTML.DIV({\n    \"class\": \"title\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"title\"));\n  }), \"\\n         \", HTML.DIV({\n    \"class\": \"message\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"message\"));\n  }), \"\\n         \", UI.If(function() {\n    return Spacebars.call(self.lookup(\"userCloseable\"));\n  }, UI.block(function() {\n    var self = this;\n    return [ \"\\n                 \", HTML.DIV({\n      \"class\": \"closeButton\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"Ã—\"\n    })), \"\\n         \" ];\n  })), \"\\n     \");\n}));\n","var constructor = (function() {\n    /***\n     * Creates an instance of Notifications\n     * @constructor\n     */\n    function Notifications() {\n        this._notificationsCollection = new Meteor.Collection(null);\n        this._notificationTimeout = undefined;\n    }\n\n    /***\n     * Adds a notification\n     * @param {string} title of the notification\n     * @param {string} message of the notification\n     * @param {object} [options={}] Options object to use for notification\n     */\n    Notifications.prototype.addNotification = function (title, message, options) {\n        options = options || {};\n        _.defaults(options, this.defaultOptions);\n\n        var notification = {};\n        notification.title = title;\n        notification.message = message;\n        notification.type = options.type;\n        notification.userCloseable = options.userCloseable;\n        notification.animationSpeed = options.animationSpeed;\n        notification.hideAnimationProperties = options.hideAnimationProperties;\n        if (options.timeout) {\n            notification.expires = new Date().getTime() + options.timeout;\n        }\n\n        this._add(notification);\n    };\n\n    /***\n     * Wraps addNotification, sets type to error\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {object} [options={}] Options object to use for notification\n     * @returns {*}\n     */\n    Notifications.prototype.error = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.ERROR;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to warning\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {object} [options={}] Options object to use for notification\n     * @returns {*}\n     */\n    Notifications.prototype.warn = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.WARNING;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to info\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {object} [options={}] Options object to use for notification\n     * @returns {*}\n     */\n    Notifications.prototype.info = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.INFO;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to success\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {object} [options={}] Options object to use for notification\n     * @returns {*}\n     */\n    Notifications.prototype.success = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.SUCCESS;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Returns the NotificationsCollection Meteor.Collection\n     * @returns {object} NotificationsCollection\n     * @private\n     */\n    Notifications.prototype._getNotificationsCollection = function () {\n        return this._notificationsCollection;\n    };\n\n    /***\n     * Does the actual add to the collection. And creates a Timeout if necessary.\n     * @param {object} notification the object to be inserted into the collection\n     * @private\n     */\n    Notifications.prototype._add = function (notification) {\n        var notificationsCollection = this._getNotificationsCollection();\n        var firstExpiration = this._getFirstExpiredTimestamp();\n\n        notificationsCollection.insert(notification);\n\n        if (notification.expires) {\n            if (this._notificationTimeout) {\n                if (firstExpiration > notification.expires) {\n                    Meteor.clearTimeout(this._notificationTimeout);\n                    this._notificationTimeout = undefined;\n                }\n            }\n\n            if (!this._notificationTimeout) {\n                this._createTimeout();\n            }\n        }\n    };\n\n    /***\n     * Returns the timestamp of the notification from the notificationsCollection that is first to expire\n     * @returns {string} first to expire timestamp\n     * @private\n     */\n    Notifications.prototype._getFirstExpiredTimestamp = function () {\n        var notificationsCollection = this._getNotificationsCollection();\n\n        var firstNotification = notificationsCollection.findOne({expires: {$gt: 0}}, {sort:[['expires', 'asc']]});\n        var firstExpiredTimestamp = firstNotification ? firstNotification.expires : 0;\n\n        return firstExpiredTimestamp;\n    };\n\n    /***\n     * creates a timeout for the first to expire notification.\n     * @private\n     */\n    Notifications.prototype._createTimeout = function () {\n        var self = this;\n        var firstExpiration = this._getFirstExpiredTimestamp();\n\n        if (firstExpiration) {\n            this._notificationTimeout = Meteor.setTimeout(function () {\n                self.remove({expires: {$lte: firstExpiration}});\n                self._createTimeout();\n            }, firstExpiration - new Date().getTime());\n        } else {\n            this._notificationTimeout = undefined;\n        }\n    };\n\n    /***\n     * Gets the class containing the color for the notification\n     * @param {String} notificationType\n     * @returns {string} classname to use for the notification\n     */\n    Notifications.prototype.getNotificationClass = function (notificationType) {\n        var notificationClass;\n\n        _.each(this.TYPES,  function (value, key) {\n            if(value === notificationType) {\n                notificationClass = key.toLowerCase();\n            }\n        });\n\n        return notificationClass;\n    };\n\n    /***\n     * Removes the notifications matching the selector\n     * @param selector\n     */\n    Notifications.prototype.remove = function (selector) {\n        this._getNotificationsCollection().remove(selector);\n\n        if (this._notificationTimeout) {\n            Meteor.clearTimeout(this._notificationTimeout);\n            this._notificationTimeout = undefined;\n            this._createTimeout();\n        }\n    };\n\n    /***\n     * Stores constants for the different notification types\n     * @type {{ERROR: number, WARNING: number, INFO: number, SUCCESS: number}}\n     */\n    Notifications.prototype.TYPES = {\n        'ERROR': 1,\n        'WARNING': 2,\n        'INFO': 3,\n        'SUCCESS': 4\n    };\n\n    /***\n     * Object with the default options for the notifications\n     * @type {{type: number, userCloseable: boolean, timeout: number}}\n     */\n    Notifications.prototype.defaultOptions = {\n        type: Notifications.prototype.TYPES.INFO,\n        userCloseable: true,\n        timeout: 0,\n        animationSpeed: 400,\n        hideAnimationProperties: {\n            height: 0,\n            opacity: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0\n        }\n    };\n\n    return Notifications;\n})();\n\nNotifications = new constructor();\n\nTemplate.notifications.notifications = function() {\n    return Notifications._getNotificationsCollection().find();\n};\n\nTemplate.notifications.rendered = function () {\n    this.firstNode._uihooks = {\n        insertElement: function (node, next) {\n            var data = UI.getElementData(node);\n\n            $(node)\n                .addClass('hidden')\n                .insertBefore(next)\n                .fadeIn({duration: data.animationSpeed})\n                .promise()\n                .done(function () {\n                    $(this).removeClass('hidden');\n                });\n        },\n        removeElement: function (node) {\n            var data = UI.getElementData(node);\n\n            $(node).animate(data.hideAnimationProperties, {duration: data.animationSpeed, complete: function () {\n                $(node).remove();\n            }});\n        }\n    };\n};","'use strict';\n\nTemplate.notification.notificationColor = function(notificationType) {\n    return Notifications.getNotificationClass(notificationType);\n};\n\nTemplate.notification.events = {\n    'click': function () {\n        if (this.userCloseable) {\n            Notifications.remove(this._id);\n        }\n    }\n};"]}